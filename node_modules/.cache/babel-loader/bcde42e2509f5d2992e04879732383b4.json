{"ast":null,"code":"var _jsxFileName = \"/Users/matchajanardhanarao/Documents/coronodashboard/src/components/CoronaMap.js\";\nimport React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport highchartsMap from \"highcharts/modules/map\";\nimport world from \"@highcharts/map-collection/custom/world.geo.json\";\nimport india from \"@highcharts/map-collection/countries/in/custom/in-all-disputed.geo.json\";\nimport code from \"./../countrycordinates.json\";\nhighchartsMap(Highcharts);\nvar data = [];\n\nclass CoronoMap extends React.Component {\n  constructor(props) {\n    super();\n    data = [];\n    this.state = {\n      mapOptions: {},\n      mapdata: props.presentRegion === \"World\" ? world : india\n    };\n  }\n\n  componentDidMount() {\n    //this.structureData();\n    let options = {\n      chart: {\n        map: 'countries/ie/ie-all'\n      },\n      title: {\n        text: 'Map Demo'\n      },\n      credits: {\n        enabled: false\n      },\n      mapNavigation: {\n        enabled: true\n      },\n      tooltip: {\n        headerFormat: '',\n        pointFormat: '<b>{point.freq}</b><br><b>{point.keyword}</b>                      <br>lat: {point.lat}, lon: {point.lon}'\n      },\n      series: [{\n        // Use the gb-all map with no data as a basemap\n        name: 'Basemap',\n        mapData: india,\n        borderColor: '#A0A0A0',\n        nullColor: 'rgba(200, 200, 200, 0.3)',\n        showInLegend: false\n      }]\n    }; // if(this.props.presentRegion === 'India')\n    // options = {\n    //   chart: {\n    //     map:'countries/ie/ie-all',\n    //     height:320\n    //   },\n    //   title: {\n    //     text: this.props.presentRegion+\" Map Plot with Cases <br></br>\"\n    //   },      \n    //   credits:{\n    //     enabled:false\n    //   },\n    //   tooltip: {\n    //     headerFormat: '{point.key}<br>',\n    //     pointFormat: 'Cases : <b>{point.value}</b>',\n    // },\n    //   series: [\n    //     {\n    //       name: 'Basemap',\n    //       mapData: india,\n    //       data: data,\n    //       name: this.props.presentRegion === 'World'?'Countries':'States',\n    //       borderColor: '#A0A0A0',\n    //   nullColor: 'rgba(200, 200, 200, 0.3)',\n    //   showInLegend: false,\n    //       states: {\n    //         hover: {\n    //           color: \"red\"\n    //         }\n    //       }\n    //     }\n    //   ],\n    //   mapNavigation: {\n    //     enabled: true,\n    //   },\n    // }\n    // else\n    //    options = {\n    //      chart: {\n    //        type:\"map\",\n    //     map:this.state.mapdata,\n    //     height:320\n    //   },\n    //   title: {\n    //     text: this.props.presentRegion+\" Map Plot with Cases\"\n    //   },\n    //   credits:{\n    //     enabled:false\n    //   },\n    //   mapNavigation: {\n    //     enabled: true,\n    //     buttonOptions: {\n    //       verticalAlign: \"bottom\"\n    //     }\n    //   },\n    //   tooltip: {\n    //     headerFormat: '{point.key}<br>',\n    //     pointFormat: 'Cases : <b>{point.value}</b>',\n    //     shared: true\n    // },\n    //   series: [\n    //     {\n    //       data: data,\n    //       joinBy: [\"iso-a3\", \"alpha3\"],\n    //       name: this.props.presentRegion === 'World'?'Countries':'States',\n    //       states: {\n    //         hover: {\n    //           color: \"red\"\n    //         }\n    //       }\n    //     }\n    //   ]};\n\n    this.setState({\n      mapOptions: options\n    });\n  }\n\n  structureData() {\n    if (this.props.presentRegion === 'India') {\n      this.props.data.countries.forEach(country => {\n        data.push([country === \"Arunachal Pradesh\" ? \"arunanchal pradesh\" : country.toLowerCase(), parseInt(this.props.data.data[country].confirmed[this.props.data.data[country].confirmed.length - 1][1]).toLocaleString()]);\n      });\n      return;\n    }\n\n    this.props.data.countries.forEach(country => {\n      code.ref_country_codes.forEach(x => {\n        if (x.country.toLowerCase() === country.toLowerCase()) {\n          data.push({\n            \"country\": x.country,\n            \"alpha3\": x.alpha3,\n            \"lat\": x.lat,\n            \"lon\": x.lon,\n            \"value\": parseInt(this.props.data.data[country].confirmed[this.props.data.data[country].confirmed.length - 1][1]).toLocaleString()\n          });\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-6 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      constructorType: 'mapChart',\n      highcharts: Highcharts,\n      options: this.state.mapOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n}\n\nexport default CoronoMap;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/components/CoronaMap.js"],"names":["React","Highcharts","HighchartsReact","highchartsMap","world","india","code","data","CoronoMap","Component","constructor","props","state","mapOptions","mapdata","presentRegion","componentDidMount","options","chart","map","title","text","credits","enabled","mapNavigation","tooltip","headerFormat","pointFormat","series","name","mapData","borderColor","nullColor","showInLegend","setState","structureData","countries","forEach","country","push","toLowerCase","parseInt","confirmed","length","toLocaleString","ref_country_codes","x","alpha3","lat","lon","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport highchartsMap from \"highcharts/modules/map\";\r\nimport world from \"@highcharts/map-collection/custom/world.geo.json\";\r\nimport india from \"@highcharts/map-collection/countries/in/custom/in-all-disputed.geo.json\";\r\nimport code from \"./../countrycordinates.json\";\r\n\r\nhighchartsMap(Highcharts);\r\n\r\n\r\nvar data=[];\r\nclass CoronoMap extends React.Component{\r\n\r\n  constructor(props)\r\n  {\r\n    super();\r\n    data=[];\r\n    this.state={mapOptions:{\r\n    },mapdata:props.presentRegion === \"World\" ? world:india};\r\n  }\r\n\r\n  componentDidMount(){\r\n    //this.structureData();\r\n    let options=\r\n    {\r\n      chart: {\r\n        map: 'countries/ie/ie-all'\r\n      },\r\n      title: {\r\n        text: 'Map Demo'\r\n      },\r\n      credits: {\r\n          enabled: false\r\n      },\r\n      mapNavigation: {\r\n        enabled: true\r\n      },\r\n  tooltip: {\r\n        headerFormat: '',\r\n        pointFormat: '<b>{point.freq}</b><br><b>{point.keyword}</b>                      <br>lat: {point.lat}, lon: {point.lon}'\r\n      },\r\n      series: [{\r\n        // Use the gb-all map with no data as a basemap\r\n        name: 'Basemap',\r\n        mapData: india,\r\n        borderColor: '#A0A0A0',\r\n        nullColor: 'rgba(200, 200, 200, 0.3)',\r\n        showInLegend: false\r\n      }]\r\n    }\r\n    // if(this.props.presentRegion === 'India')\r\n    // options = {\r\n    //   chart: {\r\n    //     map:'countries/ie/ie-all',\r\n    //     height:320\r\n    //   },\r\n    //   title: {\r\n    //     text: this.props.presentRegion+\" Map Plot with Cases <br></br>\"\r\n    //   },      \r\n    //   credits:{\r\n    //     enabled:false\r\n    //   },\r\n      \r\n    //   tooltip: {\r\n    //     headerFormat: '{point.key}<br>',\r\n    //     pointFormat: 'Cases : <b>{point.value}</b>',\r\n    // },\r\n    //   series: [\r\n    //     {\r\n    //       name: 'Basemap',\r\n\r\n    //       mapData: india,\r\n    //       data: data,\r\n    //       name: this.props.presentRegion === 'World'?'Countries':'States',\r\n    //       borderColor: '#A0A0A0',\r\n    //   nullColor: 'rgba(200, 200, 200, 0.3)',\r\n    //   showInLegend: false,\r\n    //       states: {\r\n    //         hover: {\r\n    //           color: \"red\"\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //   ],\r\n    //   mapNavigation: {\r\n    //     enabled: true,\r\n        \r\n    //   },\r\n    // }\r\n    // else\r\n    //    options = {\r\n    //      chart: {\r\n    //        type:\"map\",\r\n    //     map:this.state.mapdata,\r\n    //     height:320\r\n    //   },\r\n    //   title: {\r\n    //     text: this.props.presentRegion+\" Map Plot with Cases\"\r\n    //   },\r\n      \r\n    //   credits:{\r\n    //     enabled:false\r\n    //   },\r\n    //   mapNavigation: {\r\n    //     enabled: true,\r\n    //     buttonOptions: {\r\n    //       verticalAlign: \"bottom\"\r\n    //     }\r\n    //   },\r\n    //   tooltip: {\r\n    //     headerFormat: '{point.key}<br>',\r\n    //     pointFormat: 'Cases : <b>{point.value}</b>',\r\n    //     shared: true\r\n    // },\r\n    //   series: [\r\n    //     {\r\n    //       data: data,\r\n    //       joinBy: [\"iso-a3\", \"alpha3\"],\r\n    //       name: this.props.presentRegion === 'World'?'Countries':'States',\r\n    //       states: {\r\n    //         hover: {\r\n    //           color: \"red\"\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //   ]};\r\n     this.setState({\r\n      mapOptions: options\r\n  });\r\n}\r\n\r\n  structureData()\r\n  {\r\n    if(this.props.presentRegion === 'India'){\r\n      this.props.data.countries.forEach(country=>{\r\n        data.push([country === \"Arunachal Pradesh\"?\"arunanchal pradesh\":country.toLowerCase(),parseInt(this.props.data.data[country].confirmed[this.props.data.data[country].confirmed.length-1][1]).toLocaleString()])\r\n      })\r\n      return;\r\n    }\r\n    this.props.data.countries.forEach(country=>{\r\n      code.ref_country_codes.forEach(x=>{\r\n         if(x.country.toLowerCase() === country.toLowerCase()){\r\n           data.push({\"country\":x.country,\"alpha3\":x.alpha3,\"lat\":x.lat,\"lon\":x.lon,\"value\":parseInt(this.props.data.data[country].confirmed[this.props.data.data[country].confirmed.length-1][1]).toLocaleString()})\r\n         }\r\n      })\r\n    })\r\n  }\r\n\r\n    render(){\r\n        return (\r\n          <div className=\"col-xl-6 col-md-12\">\r\n              <div className=\"card\" >\r\n                 <div className=\"card-body\">\r\n                    <HighchartsReact constructorType ={'mapChart'} highcharts={Highcharts} options={this.state.mapOptions} />\r\n                 </div>\r\n              </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default CoronoMap;"]},"metadata":{},"sourceType":"module"}