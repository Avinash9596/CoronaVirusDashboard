{"ast":null,"code":"var _jsxFileName = \"/Users/matchajanardhanarao/Documents/coronodashboard/src/components/CoronaMap.js\";\nimport React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport highchartsMap from \"highcharts/modules/map\";\nimport world from \"@highcharts/map-collection/custom/world.geo.json\";\nimport india from \"@highcharts/map-collection/countries/in/custom/in-all-disputed.geo.json\";\nimport code from \"./../countrycordinates.json\";\nhighchartsMap(Highcharts);\nvar data = [];\n\nclass CoronoMap extends React.Component {\n  constructor(props) {\n    super();\n    data = [];\n    this.state = {\n      mapOptions: {},\n      mapdata: props.presentRegion === \"World\" ? world : india\n    };\n  }\n\n  componentDidMount() {\n    this.structureData();\n    let options = {};\n    if (this.props.presentRegion === 'India') // options = {\n      //   chart: {\n      //     map:'countries/ie/ie-all',\n      //     height:320\n      //   },\n      //   title: {\n      //     text: this.props.presentRegion+\" Map Plot with Cases <br></br>\"\n      //   },      \n      //   credits:{\n      //     enabled:false\n      //   },\n      //   tooltip: {\n      //     headerFormat: '{point.key}<br>',\n      //     pointFormat: 'Cases : <b>{point.value}</b>',\n      // },\n      //   series: [\n      //     {\n      //       name: 'Basemap',\n      //       mapData: india,\n      //       data: data,\n      //       name: this.props.presentRegion === 'World'?'Countries':'States',\n      //       borderColor: '#A0A0A0',\n      //   nullColor: 'rgba(200, 200, 200, 0.3)',\n      //   showInLegend: false,\n      //       states: {\n      //         hover: {\n      //           color: \"red\"\n      //         }\n      //       }\n      //     }\n      //   ],\n      //   mapNavigation: {\n      //     enabled: true,\n      //   },\n      // }\n      options = {\n        chart: {\n          map: 'countries/ie/ie-all'\n        },\n        title: {\n          text: 'Map Demo'\n        },\n        credits: {\n          enabled: false\n        },\n        mapNavigation: {\n          enabled: true\n        },\n        tooltip: {\n          headerFormat: '',\n          pointFormat: '<b>{point.freq}</b><br><b>{point.keyword}</b>                      <br>lat: {point.lat}, lon: {point.lon}'\n        },\n        series: [{\n          // Use the gb-all map with no data as a basemap\n          name: 'Basemap',\n          mapData: mapDataIE,\n          borderColor: '#A0A0A0',\n          nullColor: 'rgba(200, 200, 200, 0.3)',\n          showInLegend: false\n        }, {\n          // Specify points using lat/lon\n          type: 'mapbubble',\n          name: 'Cities',\n          color: '#4169E1',\n          data: [{\n            z: 10,\n            keyword: \"Galway\",\n            lat: 53.27,\n            lon: -9.25\n          }, {\n            z: 4,\n            keyword: \"Dublin\",\n            lat: 53.27,\n            lon: -6.25\n          }],\n          cursor: 'pointer',\n          point: {\n            events: {\n              click: function () {\n                console.log(this.keyword);\n              }\n            }\n          }\n        }]\n      };else options = {\n      chart: {\n        type: \"map\",\n        map: this.state.mapdata,\n        height: 320\n      },\n      title: {\n        text: this.props.presentRegion + \" Map Plot with Cases\"\n      },\n      credits: {\n        enabled: false\n      },\n      mapNavigation: {\n        enabled: true,\n        buttonOptions: {\n          verticalAlign: \"bottom\"\n        }\n      },\n      tooltip: {\n        headerFormat: '{point.key}<br>',\n        pointFormat: 'Cases : <b>{point.value}</b>',\n        shared: true\n      },\n      series: [{\n        data: data,\n        joinBy: [\"iso-a3\", \"alpha3\"],\n        name: this.props.presentRegion === 'World' ? 'Countries' : 'States',\n        states: {\n          hover: {\n            color: \"red\"\n          }\n        }\n      }]\n    };\n    this.setState({\n      mapOptions: options\n    });\n  }\n\n  structureData() {\n    if (this.props.presentRegion === 'India') {\n      this.props.data.countries.forEach(country => {\n        data.push([country === \"Arunachal Pradesh\" ? \"arunanchal pradesh\" : country.toLowerCase(), parseInt(this.props.data.data[country].confirmed[this.props.data.data[country].confirmed.length - 1][1]).toLocaleString()]);\n      });\n      return;\n    }\n\n    this.props.data.countries.forEach(country => {\n      code.ref_country_codes.forEach(x => {\n        if (x.country.toLowerCase() === country.toLowerCase()) {\n          data.push({\n            \"country\": x.country,\n            \"alpha3\": x.alpha3,\n            \"lat\": x.lat,\n            \"lon\": x.lon,\n            \"value\": parseInt(this.props.data.data[country].confirmed[this.props.data.data[country].confirmed.length - 1][1]).toLocaleString()\n          });\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-6 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      constructorType: 'mapChart',\n      highcharts: Highcharts,\n      options: this.state.mapOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n}\n\nexport default CoronoMap;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/components/CoronaMap.js"],"names":["React","Highcharts","HighchartsReact","highchartsMap","world","india","code","data","CoronoMap","Component","constructor","props","state","mapOptions","mapdata","presentRegion","componentDidMount","structureData","options","chart","map","title","text","credits","enabled","mapNavigation","tooltip","headerFormat","pointFormat","series","name","mapData","mapDataIE","borderColor","nullColor","showInLegend","type","color","z","keyword","lat","lon","cursor","point","events","click","console","log","height","buttonOptions","verticalAlign","shared","joinBy","states","hover","setState","countries","forEach","country","push","toLowerCase","parseInt","confirmed","length","toLocaleString","ref_country_codes","x","alpha3","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport highchartsMap from \"highcharts/modules/map\";\r\nimport world from \"@highcharts/map-collection/custom/world.geo.json\";\r\nimport india from \"@highcharts/map-collection/countries/in/custom/in-all-disputed.geo.json\";\r\nimport code from \"./../countrycordinates.json\";\r\n\r\nhighchartsMap(Highcharts);\r\n\r\n\r\nvar data=[];\r\nclass CoronoMap extends React.Component{\r\n\r\n  constructor(props)\r\n  {\r\n    super();\r\n    data=[];\r\n    this.state={mapOptions:{},mapdata:props.presentRegion === \"World\" ? world:india};\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.structureData();\r\n    let options={};\r\n    if(this.props.presentRegion === 'India')\r\n    // options = {\r\n    //   chart: {\r\n    //     map:'countries/ie/ie-all',\r\n    //     height:320\r\n    //   },\r\n    //   title: {\r\n    //     text: this.props.presentRegion+\" Map Plot with Cases <br></br>\"\r\n    //   },      \r\n    //   credits:{\r\n    //     enabled:false\r\n    //   },\r\n      \r\n    //   tooltip: {\r\n    //     headerFormat: '{point.key}<br>',\r\n    //     pointFormat: 'Cases : <b>{point.value}</b>',\r\n    // },\r\n    //   series: [\r\n    //     {\r\n    //       name: 'Basemap',\r\n\r\n    //       mapData: india,\r\n    //       data: data,\r\n    //       name: this.props.presentRegion === 'World'?'Countries':'States',\r\n    //       borderColor: '#A0A0A0',\r\n    //   nullColor: 'rgba(200, 200, 200, 0.3)',\r\n    //   showInLegend: false,\r\n    //       states: {\r\n    //         hover: {\r\n    //           color: \"red\"\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //   ],\r\n    //   mapNavigation: {\r\n    //     enabled: true,\r\n        \r\n    //   },\r\n    // }\r\n\r\n    options = {\r\n      chart: {\r\n        map: 'countries/ie/ie-all'\r\n      },\r\n      title: {\r\n        text: 'Map Demo'\r\n      },\r\n      credits: {\r\n          enabled: false\r\n      },\r\n      mapNavigation: {\r\n        enabled: true\r\n      },\r\n  tooltip: {\r\n        headerFormat: '',\r\n        pointFormat: '<b>{point.freq}</b><br><b>{point.keyword}</b>                      <br>lat: {point.lat}, lon: {point.lon}'\r\n      },\r\n      series: [{\r\n        // Use the gb-all map with no data as a basemap\r\n        name: 'Basemap',\r\n        mapData: mapDataIE,\r\n        borderColor: '#A0A0A0',\r\n        nullColor: 'rgba(200, 200, 200, 0.3)',\r\n        showInLegend: false\r\n      }, {\r\n        // Specify points using lat/lon\r\n        type: 'mapbubble',\r\n        name: 'Cities',\r\n        color: '#4169E1',\r\n        data: [{ z: 10, keyword: \"Galway\", lat: 53.27, lon: -9.25 }, \r\n               { z: 4, keyword: \"Dublin\", lat: 53.27, lon: -6.25 }],\r\n        cursor: 'pointer',\r\n        point: {\r\n          events: {\r\n            click: function() {\r\n              console.log(this.keyword);\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n    else\r\n       options = {\r\n         chart: {\r\n           type:\"map\",\r\n        map:this.state.mapdata,\r\n        height:320\r\n      },\r\n      title: {\r\n        text: this.props.presentRegion+\" Map Plot with Cases\"\r\n      },\r\n      \r\n      credits:{\r\n        enabled:false\r\n      },\r\n      mapNavigation: {\r\n        enabled: true,\r\n        buttonOptions: {\r\n          verticalAlign: \"bottom\"\r\n        }\r\n      },\r\n      tooltip: {\r\n        headerFormat: '{point.key}<br>',\r\n        pointFormat: 'Cases : <b>{point.value}</b>',\r\n        shared: true\r\n    },\r\n      series: [\r\n        {\r\n          data: data,\r\n          joinBy: [\"iso-a3\", \"alpha3\"],\r\n          name: this.props.presentRegion === 'World'?'Countries':'States',\r\n          states: {\r\n            hover: {\r\n              color: \"red\"\r\n            }\r\n          }\r\n        }\r\n      ]};\r\n     this.setState({\r\n      mapOptions: options\r\n  });\r\n}\r\n\r\n  structureData()\r\n  {\r\n    if(this.props.presentRegion === 'India'){\r\n      this.props.data.countries.forEach(country=>{\r\n        data.push([country === \"Arunachal Pradesh\"?\"arunanchal pradesh\":country.toLowerCase(),parseInt(this.props.data.data[country].confirmed[this.props.data.data[country].confirmed.length-1][1]).toLocaleString()])\r\n      })\r\n      return;\r\n    }\r\n    this.props.data.countries.forEach(country=>{\r\n      code.ref_country_codes.forEach(x=>{\r\n         if(x.country.toLowerCase() === country.toLowerCase()){\r\n           data.push({\"country\":x.country,\"alpha3\":x.alpha3,\"lat\":x.lat,\"lon\":x.lon,\"value\":parseInt(this.props.data.data[country].confirmed[this.props.data.data[country].confirmed.length-1][1]).toLocaleString()})\r\n         }\r\n      })\r\n    })\r\n  }\r\n\r\n    render(){\r\n        return (\r\n          <div className=\"col-xl-6 col-md-12\">\r\n              <div className=\"card\" >\r\n                 <div className=\"card-body\">\r\n                    <HighchartsReact constructorType ={'mapChart'} highcharts={Highcharts} options={this.state.mapOptions} />\r\n                 </div>\r\n              </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default CoronoMap;"]},"metadata":{},"sourceType":"module"}