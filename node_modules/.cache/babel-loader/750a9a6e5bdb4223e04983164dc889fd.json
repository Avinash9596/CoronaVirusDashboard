{"ast":null,"code":"var _jsxFileName = \"/Users/matchajanardhanarao/Documents/coronodashboard/src/components/ColumnGraph.js\";\nimport React from 'react';\nimport Highcharts from 'highcharts/highcharts';\nimport drilldown from 'highcharts/modules/drilldown.js';\nimport HighchartsReact from 'highcharts-react-official';\ndrilldown(Highcharts);\n\nclass ColumnGraph extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      options: {//     chart: {\n        //         type: 'column',\n        //         height:320,\n        //     },\n        //     title: {\n        //         text: 'Monthly Cases Year (2020)'\n        //     },\n        //     subtitle: {\n        //         text: 'Coronovirus Cases    '\n        //     },\n        //     xAxis: {\n        //         categories: [\n        //             'Jan',\n        //             'Feb',\n        //             'Mar',\n        //             'Apr',\n        //             'May',\n        //             'Jun',\n        //             'Jul',\n        //             'Aug',\n        //             'Sep',\n        //             'Oct',\n        //             'Nov',\n        //             'Dec'\n        //         ],\n        //     },\n        //     credits:{\n        //         enabled:false\n        //     },\n        //     yAxis: {\n        //         min: 100,\n        //         title: {\n        //             text: 'Cases'\n        //         }\n        //     },\n        //     series: [{\n        //         name:'Cases',\n        //         data: [1200,5009,19000,30000,39900, 47800, 79333]\n        //     }]\n        // }};\n      }\n    }; //this.getData(props.presentRegion)\n  }\n\n  componentDidMount() {\n    this.structureData(this.props.data);\n  }\n\n  structureData(data) {\n    let i = 0,\n        DaysInMonths = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    let nameOfMonths = {\n      0: \"Jan\",\n      1: \"Feb\",\n      2: \"March\",\n      3: \"Apr\",\n      4: \"May\",\n      5: \"Jun\",\n      6: \"Jul\",\n      7: \"Aug\",\n      8: \"Sept\",\n      9: \"Oct\",\n      10: \"Nov\",\n      11: \"Dec\"\n    };\n    let obj = [],\n        month = 0,\n        prevdata = 0,\n        ddrObject = [],\n        daysdata = [],\n        daysPrevData = 0;\n    data.forEach((element, index) => {\n      month = element.Date.split(\"-\")[1];\n      daysPrevData = 0;\n      if (index > 0) daysPrevData += data[index - 1].Cases;\n      daysdata.push([element.Date.split(\"-\")[2].split(\"T\")[0], element.Cases - daysPrevData]);\n\n      if (element.Date.split(\"-\")[2].split(\"T\")[0] == DaysInMonths[month - 1]) {\n        ddrObject.push({\n          name: nameOfMonths[i],\n          \"id\": i.toString(),\n          \"data\": daysdata\n        });\n        daysdata = [];\n        if (i > 0) prevdata += obj[i - 1].y;\n        obj[i] = {\n          name: nameOfMonths[i],\n          \"y\": element.Cases - prevdata,\n          drilldown: i.toString()\n        };\n        i++;\n      } else if (index == data.length - 1) {\n        prevdata += obj[i - 1].y;\n        ddrObject.push({\n          name: nameOfMonths[i],\n          \"id\": i.toString(),\n          \"data\": daysdata\n        });\n        daysdata = [];\n        obj[i] = {\n          name: nameOfMonths[i],\n          \"y\": element.Cases - prevdata,\n          drilldown: i.toString()\n        };\n      }\n    });\n    this.setState({\n      options: {\n        chart: {\n          type: 'column',\n          height: 320\n        },\n        title: {\n          text: this.props.presentRegion + ' Coronovirus Cases , 2020'\n        },\n        subtitle: {\n          text: 'Monthly/Daily Cases'\n        },\n        xAxis: {\n          type: 'category',\n          title: this.series.name\n        },\n        yAxis: {\n          title: {\n            text: 'Cases'\n          }\n        },\n        legend: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        plotOptions: {\n          series: {\n            borderWidth: 0,\n            dataLabels: {\n              enabled: true,\n              format: '{point.y}'\n            }\n          }\n        },\n        accessibility: {\n          announceNewData: {\n            enabled: true\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: function () {\n            return this.point.name + \"<br/> Cases:<b>\" + this.point.y + \"</b>\";\n          },\n          // headerFormat: '<span style=\"font-size:11px\">Avinash</span><br></br>',\n          // pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y}</b><br></br>',\n          useHTML: true\n        },\n        series: [{\n          name: \"Month\",\n          data: obj\n        }],\n        drilldown: {\n          name: \"Dates\",\n          series: ddrObject\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 19\n      }\n    })));\n  }\n\n}\n\nexport default ColumnGraph;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/components/ColumnGraph.js"],"names":["React","Highcharts","drilldown","HighchartsReact","ColumnGraph","Component","constructor","props","state","options","componentDidMount","structureData","data","i","DaysInMonths","nameOfMonths","obj","month","prevdata","ddrObject","daysdata","daysPrevData","forEach","element","index","Date","split","Cases","push","name","toString","y","length","setState","chart","type","height","title","text","presentRegion","subtitle","xAxis","series","yAxis","legend","enabled","credits","plotOptions","borderWidth","dataLabels","format","accessibility","announceNewData","tooltip","formatter","point","useHTML","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Highcharts from 'highcharts/highcharts';\r\nimport drilldown from 'highcharts/modules/drilldown.js'\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\ndrilldown(Highcharts);\r\n\r\nclass ColumnGraph extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super();\r\n        this.state={\r\n        options: {\r\n        //     chart: {\r\n        //         type: 'column',\r\n        //         height:320,\r\n        //     },\r\n        //     title: {\r\n        //         text: 'Monthly Cases Year (2020)'\r\n        //     },\r\n        //     subtitle: {\r\n        //         text: 'Coronovirus Cases    '\r\n        //     },\r\n        //     xAxis: {\r\n        //         categories: [\r\n        //             'Jan',\r\n        //             'Feb',\r\n        //             'Mar',\r\n        //             'Apr',\r\n        //             'May',\r\n        //             'Jun',\r\n        //             'Jul',\r\n        //             'Aug',\r\n        //             'Sep',\r\n        //             'Oct',\r\n        //             'Nov',\r\n        //             'Dec'\r\n        //         ],\r\n        //     },\r\n        //     credits:{\r\n        //         enabled:false\r\n        //     },\r\n        //     yAxis: {\r\n        //         min: 100,\r\n        //         title: {\r\n        //             text: 'Cases'\r\n        //         }\r\n        //     },\r\n        //     series: [{\r\n        //         name:'Cases',\r\n        //         data: [1200,5009,19000,30000,39900, 47800, 79333]\r\n        \r\n        //     }]\r\n        // }};\r\n        }\r\n    }\r\n     //this.getData(props.presentRegion)\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        this.structureData(this.props.data);\r\n    }\r\n\r\n    structureData(data)\r\n    { \r\n        let i=0,DaysInMonths =[31,29,31,30,31,30,31,31,30,31,30,31];\r\n        let nameOfMonths = {0:\"Jan\",1:\"Feb\",2:\"March\",3:\"Apr\",4:\"May\",5:\"Jun\",6:\"Jul\",7:\"Aug\",8:\"Sept\",9:\"Oct\",10:\"Nov\",11:\"Dec\"}\r\n\r\n        let obj =[],month=0,prevdata=0,ddrObject=[],daysdata=[],daysPrevData=0;\r\n\r\n\r\n        data.forEach((element,index) => {\r\n            month = element.Date.split(\"-\")[1];\r\n            daysPrevData = 0;\r\n\r\n            if(index>0)\r\n                daysPrevData+=data[index-1].Cases;\r\n        \r\n            daysdata.push([element.Date.split(\"-\")[2].split(\"T\")[0],element.Cases-daysPrevData]);\r\n\r\n            if(element.Date.split(\"-\")[2].split(\"T\")[0] == DaysInMonths[month-1]){\r\n\r\n                ddrObject.push({name:nameOfMonths[i],\"id\":i.toString(),\"data\":daysdata});\r\n                daysdata=[];\r\n                if(i>0) prevdata+=obj[i-1].y;\r\n\r\n                obj[i]={name:nameOfMonths[i],\"y\":element.Cases-prevdata,drilldown:i.toString()};\r\n\r\n                i++;\r\n            }\r\n            else if(index == data.length-1){\r\n                prevdata+=obj[i-1].y;\r\n                ddrObject.push({name:nameOfMonths[i],\"id\":i.toString(),\"data\":daysdata});\r\n                daysdata=[];\r\n                obj[i] = {name:nameOfMonths[i],\"y\":element.Cases-prevdata,drilldown:i.toString()};\r\n            }      \r\n        });\r\n\r\n        this.setState({\r\n            options: {\r\n                chart: {\r\n                    type: 'column',\r\n                    height:320\r\n                },\r\n                title: {\r\n                    text: this.props.presentRegion+' Coronovirus Cases , 2020'\r\n                },\r\n                subtitle: {\r\n                    text: 'Monthly/Daily Cases'\r\n                },\r\n                \r\n                xAxis: {\r\n                    type: 'category',\r\n                    title: this.series.name\r\n                },\r\n                yAxis: {\r\n                    title: {\r\n                        text: 'Cases'\r\n                    }\r\n                },\r\n                legend: {\r\n                    enabled: false\r\n                },\r\n                credits:{\r\n                    enabled:false\r\n                },\r\n                plotOptions: {\r\n                    series: {\r\n                        borderWidth: 0,\r\n                        dataLabels: {\r\n                            enabled: true,\r\n                            format: '{point.y}'\r\n                        }\r\n                    }\r\n                },\r\n                accessibility: {\r\n                    announceNewData: {\r\n                        enabled: true\r\n                    }\r\n                },\r\n                tooltip: {\r\n                    enabled:true,\r\n                    formatter: function() {\r\n                        return this.point.name+\"<br/> Cases:<b>\"+this.point.y+\"</b>\"\r\n                    },\r\n                    // headerFormat: '<span style=\"font-size:11px\">Avinash</span><br></br>',\r\n                    // pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y}</b><br></br>',\r\n                     useHTML:true\r\n                },\r\n            \r\n                series: [\r\n                    {\r\n                       name:\"Month\", \r\n                        data:obj\r\n                   }\r\n                ],\r\n                drilldown: {\r\n                    name:\"Dates\",\r\n                    series: ddrObject\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <HighchartsReact highcharts={Highcharts} options={this.state.options} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColumnGraph;"]},"metadata":{},"sourceType":"module"}