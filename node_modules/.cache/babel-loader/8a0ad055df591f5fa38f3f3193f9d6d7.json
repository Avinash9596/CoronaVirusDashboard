{"ast":null,"code":"var coronoService={structureData:function structureData(value){var structuredData={};//INITIALISING ALL THE FIELDS \nstructuredData[\"affectedcountries\"]=[];structuredData[\"tableData\"]=[];structuredData[\"highestactive\"]={};structuredData[\"highestrecovered\"]={};structuredData[\"highestdeaths\"]={};try{structuredData[\"TotalConfirmed\"]=value.total.confirmed[value.total.confirmed.length-1][1];structuredData[\"TotalDeaths\"]=value.total.deaths[value.total.deaths.length-1][1];structuredData[\"TotalRecovered\"]=value.total.recovered[value.total.recovered.length-1][1];structuredData[\"NewConfirmed\"]=structuredData[\"TotalConfirmed\"]-value.total.confirmed[value.total.confirmed.length-2][1];structuredData[\"NewRecovered\"]=structuredData[\"TotalRecovered\"]-value.total.recovered[value.total.recovered.length-2][1];structuredData[\"NewDeaths\"]=structuredData[\"TotalDeaths\"]-value.total.deaths[value.total.deaths.length-2][1];structuredData[\"activecases\"]=structuredData[\"TotalConfirmed\"]-(structuredData[\"TotalDeaths\"]+structuredData[\"TotalRecovered\"]);//get country wise data\nvalue.countries.forEach(function(element){var confirmed=value.data[element].confirmed;var deaths=value.data[element].deaths;var recovered=value.data[element].recovered;// AFFECTED COUNTRIES\nstructuredData[\"affectedcountries\"].push({\"name\":element,\"cases\":confirmed[confirmed.length-1][1],\"percentage\":confirmed[confirmed.length-1][1]/structuredData[\"TotalConfirmed\"]*100});// ALL COUNTRIES/STATES DATA\nstructuredData[\"tableData\"].push({\"name\":element,\"cases\":confirmed[confirmed.length-1][1],\"deaths\":deaths[deaths.length-1][1],\"recovered\":recovered[recovered.length-1][1],\"changeinConfirmed\":confirmed[confirmed.length-1][1]-confirmed[confirmed.length-2][1],\"changeinRecovered\":recovered[recovered.length-1][1]-recovered[recovered.length-2][1],\"changeinDeaths\":deaths[deaths.length-1][1]-deaths[deaths.length-2][1],\"changeinActive\":confirmed[confirmed.length-1][1]-confirmed[confirmed.length-2][1]-(recovered[recovered.length-1][1]-recovered[recovered.length-2][1])-(deaths[deaths.length-1][1]-deaths[deaths.length-2][1]),\"active\":confirmed[confirmed.length-1][1]-deaths[deaths.length-1][1]-recovered[recovered.length-1][1],\"recoveredRate\":(recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1]*100).toFixed(2)});// FOR HIGHEST ACTIVE/RECOVERED/DEATHS RATES\nif(Object.keys(structuredData.highestactive).length>0){if(structuredData.highestactive.active_percentage<(confirmed[confirmed.length-1][1]-recovered[recovered.length-1][1]-deaths[deaths.length-1][1])/confirmed[confirmed.length-1][1]*100){structuredData.highestactive.name=element;structuredData.highestactive.active_percentage=(confirmed[confirmed.length-1][1]-recovered[recovered.length-1][1]-deaths[deaths.length-1][1])/confirmed[confirmed.length-1][1]*100;}if(structuredData.highestrecovered.rec_percentage<recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1]*100){structuredData.highestrecovered.name=element;structuredData.highestrecovered.rec_percentage=recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1]*100;}if(structuredData.highestdeaths.death_percentage<deaths[deaths.length-1][1]/confirmed[confirmed.length-1][1]*100){structuredData.highestdeaths.name=element;structuredData.highestdeaths.death_percentage=deaths[deaths.length-1][1]/confirmed[confirmed.length-1][1]*100;}}else{structuredData.highestactive={name:element,active_percentage:(confirmed[confirmed.length-1][1]-recovered[recovered.length-1][1]-deaths[deaths.length-1][1])/confirmed[confirmed.length-1][1]*100};structuredData.highestrecovered={name:element,rec_percentage:recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1]*100};structuredData.highestdeaths={name:element,death_percentage:deaths[deaths.length-1][1]/confirmed[confirmed.length-1][1]*100};}});}catch(err){console.log(err);}return structuredData;}};export default coronoService;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/services/corona.service.js"],"names":["coronoService","structureData","value","structuredData","total","confirmed","length","deaths","recovered","countries","forEach","element","data","push","toFixed","Object","keys","highestactive","active_percentage","name","highestrecovered","rec_percentage","highestdeaths","death_percentage","err","console","log"],"mappings":"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","sourcesContent":["const coronoService ={\n    \n\n    structureData:function(value){\n        let structuredData={};\n\n        //INITIALISING ALL THE FIELDS \n        structuredData[\"affectedcountries\"]=[];\n        structuredData[\"tableData\"] = [];\n        structuredData[\"highestactive\"] = {};\n        structuredData[\"highestrecovered\"] = {};\n        structuredData[\"highestdeaths\"] = {};\n\n        try{\n        structuredData[\"TotalConfirmed\"] = value.total.confirmed[value.total.confirmed.length-1][1];\n        structuredData[\"TotalDeaths\"] = value.total.deaths[value.total.deaths.length-1][1];\n        structuredData[\"TotalRecovered\"] = value.total.recovered[value.total.recovered.length-1][1];\n        structuredData[\"NewConfirmed\"] = structuredData[\"TotalConfirmed\"]-value.total.confirmed[value.total.confirmed.length-2][1];\n        structuredData[\"NewRecovered\"] = structuredData[\"TotalRecovered\"]-value.total.recovered[value.total.recovered.length-2][1];\n        structuredData[\"NewDeaths\"] = structuredData[\"TotalDeaths\"]-value.total.deaths[value.total.deaths.length-2][1];\n        structuredData[\"activecases\"] = structuredData[\"TotalConfirmed\"]-(structuredData[\"TotalDeaths\"]+structuredData[\"TotalRecovered\"]);    \n\n        //get country wise data\n        value.countries.forEach((element) => {\n            let confirmed = value.data[element].confirmed;\n            let deaths = value.data[element].deaths;\n            let recovered = value.data[element].recovered;\n\n            // AFFECTED COUNTRIES\n            structuredData[\"affectedcountries\"].push({\"name\":element,\"cases\":confirmed[confirmed.length-1][1],\"percentage\":(confirmed[confirmed.length-1][1]/structuredData[\"TotalConfirmed\"])*100});\n            \n            // ALL COUNTRIES/STATES DATA\n            structuredData[\"tableData\"].push({\"name\":element,\n            \"cases\":confirmed[confirmed.length-1][1],\n            \"deaths\":deaths[deaths.length-1][1],\n            \"recovered\":recovered[recovered.length-1][1],\n            \"changeinConfirmed\":confirmed[confirmed.length-1][1]-confirmed[confirmed.length-2][1],\n            \"changeinRecovered\" : recovered[recovered.length-1][1]-recovered[recovered.length-2][1],\n            \"changeinDeaths\":deaths[deaths.length-1][1]-deaths[deaths.length-2][1],\n            \"changeinActive\":((confirmed[confirmed.length-1][1]-confirmed[confirmed.length-2][1]) - (recovered[recovered.length-1][1]-recovered[recovered.length-2][1]) - (deaths[deaths.length-1][1]-deaths[deaths.length-2][1])),\n            \"active\":confirmed[confirmed.length-1][1]-deaths[deaths.length-1][1]-recovered[recovered.length-1][1],\n            \"recoveredRate\" : ((recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1])*100).toFixed(2)\n            })\n\n            // FOR HIGHEST ACTIVE/RECOVERED/DEATHS RATES\n            if(Object.keys(structuredData.highestactive).length>0){\n                if(structuredData.highestactive.active_percentage < ((confirmed[confirmed.length-1][1]-recovered[recovered.length-1][1]-deaths[deaths.length-1][1])/confirmed[confirmed.length-1][1])*100){\n                    structuredData.highestactive.name = element;\n                    structuredData.highestactive.active_percentage = ((confirmed[confirmed.length-1][1]-recovered[recovered.length-1][1]-deaths[deaths.length-1][1])/confirmed[confirmed.length-1][1])*100\n                }\n                if(structuredData.highestrecovered.rec_percentage < (recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1])*100){\n                    structuredData.highestrecovered.name=element;\n                    structuredData.highestrecovered.rec_percentage=(recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1])*100\n                }\n                if(structuredData.highestdeaths.death_percentage < (deaths[deaths.length-1][1]/confirmed[confirmed.length-1][1])*100){\n                    structuredData.highestdeaths.name = element;\n                    structuredData.highestdeaths.death_percentage = (deaths[deaths.length-1][1]/confirmed[confirmed.length-1][1])*100\n                }\n            }\n            else{\n              structuredData.highestactive={name:element,active_percentage: ((confirmed[confirmed.length-1][1] - recovered[recovered.length-1][1]-deaths[deaths.length-1][1])/confirmed[confirmed.length-1][1])*100};\n              structuredData.highestrecovered={name:element,rec_percentage:(recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1])*100};\n              structuredData.highestdeaths={name:element,death_percentage:(deaths[deaths.length-1][1]/confirmed[confirmed.length-1][1])*100};   \n            }         \n\n        });\n        }\n        catch(err){\n            console.log(err);\n        }\n        \n        return structuredData;\n    },\n    \n}\n\nexport default coronoService;"]},"metadata":{},"sourceType":"module"}