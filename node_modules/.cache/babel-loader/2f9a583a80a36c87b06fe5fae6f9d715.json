{"ast":null,"code":"const dataObj = {};\nconst coronoService = {\n  structureData: function (value) {\n    let structuredData = {};\n    structuredData[\"affectedcountries\"] = [];\n    structuredData[\"tableData\"] = [];\n\n    try {\n      structuredData[\"TotalConfirmed\"] = value.total.confirmed[value.total.confirmed.length - 1][1];\n      structuredData[\"TotalDeaths\"] = value.total.deaths[value.total.deaths.length - 1][1];\n      structuredData[\"TotalRecovered\"] = value.total.recovered[value.total.recovered.length - 1][1];\n      structuredData[\"NewConfirmed\"] = structuredData[\"TotalConfirmed\"] - value.total.confirmed[value.total.confirmed.length - 2][1];\n      structuredData[\"NewRecovered\"] = structuredData[\"TotalRecovered\"] - value.total.recovered[value.total.recovered.length - 2][1];\n      structuredData[\"NewDeaths\"] = structuredData[\"TotalDeaths\"] - value.total.deaths[value.total.deaths.length - 2][1];\n      structuredData[\"activecases\"] = structuredData[\"TotalConfirmed\"] - (structuredData[\"TotalDeaths\"] + structuredData[\"TotalRecovered\"]); //get country wise data for tableData/AffectedCountries\n\n      value.countries.forEach((element, index) => {\n        let confirmed = value.data[element].confirmed;\n        let deaths = value.data[element].deaths;\n        let recovered = value.data[element].recovered;\n        structuredData[\"affectedcountries\"].push({\n          \"name\": element,\n          \"cases\": confirmed[confirmed.length - 1][1],\n          \"percentage\": confirmed[confirmed.length - 1][1] / structuredData[\"TotalConfirmed\"] * 100\n        });\n        structuredData[\"tableData\"].push({\n          \"name\": element,\n          \"cases\": confirmed[confirmed.length - 1][1],\n          \"deaths\": deaths[deaths.length - 1][1],\n          \"recovered\": recovered[recovered.length - 1][1],\n          \"changeinConfirmed\": confirmed[confirmed.length - 1][1] - confirmed[confirmed.length - 2][1],\n          \"changeinRecovered\": recovered[recovered.length - 1][1] - recovered[recovered.length - 2][1],\n          \"changeinDeaths\": deaths[deaths.length - 1][1] - deaths[deaths.length - 2][1],\n          \"changeinActive\": confirmed[confirmed.length - 1][1] - confirmed[confirmed.length - 2][1] - (recovered[recovered.length - 1][1] - recovered[recovered.length - 2][1]) - (deaths[deaths.length - 1][1] - deaths[deaths.length - 2][1]),\n          \"active\": confirmed[confirmed.length - 1][1] - deaths[deaths.length - 1][1] - recovered[recovered.length - 1][1],\n          \"recoveredRate\": (recovered[recovered.length - 1][1] / confirmed[confirmed.length - 1][1] * 100).toFixed(2)\n        });\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    return structuredData;\n  }\n};\nexport default coronoService;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/services/corona.service.js"],"names":["dataObj","coronoService","structureData","value","structuredData","total","confirmed","length","deaths","recovered","countries","forEach","element","index","data","push","toFixed","err","console","log"],"mappings":"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","sourcesContent":["const dataObj={};\nconst coronoService ={\n    \n\n    structureData:function(value){\n        let structuredData={};\n\n        structuredData[\"affectedcountries\"]=[];\n        structuredData[\"tableData\"] = [];\n\n        try{\n        structuredData[\"TotalConfirmed\"] = value.total.confirmed[value.total.confirmed.length-1][1];\n        structuredData[\"TotalDeaths\"] = value.total.deaths[value.total.deaths.length-1][1];\n        structuredData[\"TotalRecovered\"] = value.total.recovered[value.total.recovered.length-1][1];\n        structuredData[\"NewConfirmed\"] = structuredData[\"TotalConfirmed\"]-value.total.confirmed[value.total.confirmed.length-2][1];\n        structuredData[\"NewRecovered\"] = structuredData[\"TotalRecovered\"]-value.total.recovered[value.total.recovered.length-2][1];\n        structuredData[\"NewDeaths\"] = structuredData[\"TotalDeaths\"]-value.total.deaths[value.total.deaths.length-2][1];\n        structuredData[\"activecases\"] = structuredData[\"TotalConfirmed\"]-(structuredData[\"TotalDeaths\"]+structuredData[\"TotalRecovered\"]);    \n\n        //get country wise data for tableData/AffectedCountries\n        value.countries.forEach((element,index) => {\n            let confirmed = value.data[element].confirmed;\n            let deaths = value.data[element].deaths;\n            let recovered = value.data[element].recovered;\n\n            structuredData[\"affectedcountries\"].push({\"name\":element,\"cases\":confirmed[confirmed.length-1][1],\"percentage\":(confirmed[confirmed.length-1][1]/structuredData[\"TotalConfirmed\"])*100});\n            \n            structuredData[\"tableData\"].push({\"name\":element,\n            \"cases\":confirmed[confirmed.length-1][1],\n            \"deaths\":deaths[deaths.length-1][1],\n            \"recovered\":recovered[recovered.length-1][1],\n            \"changeinConfirmed\":confirmed[confirmed.length-1][1]-confirmed[confirmed.length-2][1],\n            \"changeinRecovered\" : recovered[recovered.length-1][1]-recovered[recovered.length-2][1],\n            \"changeinDeaths\":deaths[deaths.length-1][1]-deaths[deaths.length-2][1],\n            \"changeinActive\":((confirmed[confirmed.length-1][1]-confirmed[confirmed.length-2][1]) - (recovered[recovered.length-1][1]-recovered[recovered.length-2][1]) - (deaths[deaths.length-1][1]-deaths[deaths.length-2][1])),\n            \"active\":confirmed[confirmed.length-1][1]-deaths[deaths.length-1][1]-recovered[recovered.length-1][1],\n            \"recoveredRate\" : ((recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1])*100).toFixed(2)\n            })\n\n        });\n\n        }\n        catch(err){\n            console.log(err);\n        }\n        \n        return structuredData;\n    },\n    \n}\n\nexport default coronoService;"]},"metadata":{},"sourceType":"module"}