{"ast":null,"code":"var _jsxFileName = \"/Users/matchajanardhanarao/Documents/coronodashboard/src/components/CoronaMap.js\";\nimport React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport highchartsMap from \"highcharts/modules/map\";\nimport world from \"@highcharts/map-collection/custom/world.geo.json\";\nimport india from \"@highcharts/map-collection/countries/in/custom/in-all-disputed.geo.json\";\nimport code from \"./../countrycordinates.json\";\nimport DataContext from './../dataContext';\nhighchartsMap(Highcharts);\nvar data = [];\n\nclass CoronoMap extends React.Component {\n  constructor(props) {\n    super();\n    data = [];\n    this.state = {\n      options: {}\n    };\n  }\n\n  componentDidMount() {\n    this.structureData();\n    let options = {};\n    if (this.context.presentRegion === 'India') options = {\n      chart: {\n        map: india,\n        height: 320\n      },\n      title: {\n        text: this.context.presentRegion + \" Map Plot with Cases <span className='fa fa-expand'></span>\",\n        useHTML: true\n      },\n      credits: {\n        enabled: false\n      },\n      mapNavigation: {\n        enabled: true\n      },\n      tooltip: {\n        headerFormat: '{point.key}<br>',\n        pointFormat: 'Cases : <b>{point.value}</b>',\n        shared: true\n      },\n      series: [{\n        mapData: india,\n        data: data,\n        name: this.context.presentRegion === 'World' ? 'Countries' : 'States',\n        borderColor: '#A0A0A0',\n        nullColor: 'rgba(200, 200, 200, 0.3)',\n        showInLegend: false,\n        states: {\n          hover: {\n            color: \"red\"\n          }\n        }\n      }]\n    };else options = {\n      chart: {\n        map: world,\n        height: 320\n      },\n      title: {\n        text: this.context.presentRegion + \" Map Plot with Cases\"\n      },\n      credits: {\n        enabled: false\n      },\n      mapNavigation: {\n        enabled: true\n      },\n      tooltip: {\n        headerFormat: '{point.key}<br>',\n        pointFormat: 'Cases : <b>{point.value}</b>',\n        shared: true\n      },\n      series: [{\n        data: data,\n        joinBy: [\"iso-a3\", \"alpha3\"],\n        name: this.context.presentRegion === 'World' ? 'Countries' : 'States',\n        borderColor: '#A0A0A0',\n        nullColor: 'rgba(200, 200, 200, 0.3)',\n        showInLegend: false,\n        states: {\n          hover: {\n            color: \"red\"\n          }\n        }\n      }]\n    };\n    this.setState({\n      mapOptions: options\n    });\n  }\n\n  structureData() {\n    if (this.context.presentRegion === 'India') {\n      this.context.actualData.countries.forEach(country => {\n        data.push([country === \"Arunachal Pradesh\" ? \"arunanchal pradesh\" : country.toLowerCase(), parseInt(this.context.actualData.data[country].confirmed[this.context.actualData.data[country].confirmed.length - 1][1]).toLocaleString()]);\n      });\n      return;\n    }\n\n    this.context.actualData.countries.forEach(country => {\n      code.ref_country_codes.forEach(x => {\n        if (x.country.toLowerCase() === country.toLowerCase()) {\n          data.push({\n            \"country\": x.country,\n            \"alpha3\": x.alpha3,\n            \"lat\": x.lat,\n            \"lon\": x.lon,\n            \"value\": parseInt(this.context.actualData.data[country].confirmed[this.context.actualData.data[country].confirmed.length - 1][1]).toLocaleString()\n          });\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-6 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      constructorType: 'mapChart',\n      highcharts: Highcharts,\n      options: this.state.mapOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n}\n\nCoronoMap.contextType = DataContext;\nexport default CoronoMap;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/components/CoronaMap.js"],"names":["React","Highcharts","HighchartsReact","highchartsMap","world","india","code","DataContext","data","CoronoMap","Component","constructor","props","state","options","componentDidMount","structureData","context","presentRegion","chart","map","height","title","text","useHTML","credits","enabled","mapNavigation","tooltip","headerFormat","pointFormat","shared","series","mapData","name","borderColor","nullColor","showInLegend","states","hover","color","joinBy","setState","mapOptions","actualData","countries","forEach","country","push","toLowerCase","parseInt","confirmed","length","toLocaleString","ref_country_codes","x","alpha3","lat","lon","render","contextType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,KAAP,MAAkB,kDAAlB;AACA,OAAOC,KAAP,MAAkB,yEAAlB;AACA,OAAOC,IAAP,MAAiB,6BAAjB;AAEA,OAAOC,WAAP,MAAwB,kBAAxB;AAEAJ,aAAa,CAACF,UAAD,CAAb;AAGA,IAAIO,IAAI,GAAC,EAAT;;AACA,MAAMC,SAAN,SAAwBT,KAAK,CAACU,SAA9B,CAAuC;AAGrCC,EAAAA,WAAW,CAACC,KAAD,EACX;AACE;AACAJ,IAAAA,IAAI,GAAC,EAAL;AACA,SAAKK,KAAL,GAAW;AAACC,MAAAA,OAAO,EAAC;AAAT,KAAX;AACD;;AAEDC,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,aAAL;AACA,QAAIF,OAAO,GAAC,EAAZ;AACA,QAAG,KAAKG,OAAL,CAAaC,aAAb,KAA+B,OAAlC,EACAJ,OAAO,GAAG;AACRK,MAAAA,KAAK,EAAE;AACLC,QAAAA,GAAG,EAACf,KADC;AAELgB,QAAAA,MAAM,EAAC;AAFF,OADC;AAKRC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE,KAAKN,OAAL,CAAaC,aAAb,GAA2B,6DAD5B;AAELM,QAAAA,OAAO,EAAC;AAFH,OALC;AASRC,MAAAA,OAAO,EAAC;AACNC,QAAAA,OAAO,EAAC;AADF,OATA;AAYRC,MAAAA,aAAa,EAAE;AACbD,QAAAA,OAAO,EAAE;AADI,OAZP;AAgBRE,MAAAA,OAAO,EAAE;AACPC,QAAAA,YAAY,EAAE,iBADP;AAEPC,QAAAA,WAAW,EAAE,8BAFN;AAGPC,QAAAA,MAAM,EAAE;AAHD,OAhBD;AAqBRC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,OAAO,EAAE5B,KADX;AAEEG,QAAAA,IAAI,EAAEA,IAFR;AAGE0B,QAAAA,IAAI,EAAE,KAAKjB,OAAL,CAAaC,aAAb,KAA+B,OAA/B,GAAuC,WAAvC,GAAmD,QAH3D;AAIEiB,QAAAA,WAAW,EAAE,SAJf;AAKEC,QAAAA,SAAS,EAAE,0BALb;AAMCC,QAAAA,YAAY,EAAE,KANf;AAOEC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE;AACLC,YAAAA,KAAK,EAAE;AADF;AADD;AAPV,OADM;AArBA,KAAV,CADA,KAuCG1B,OAAO,GAAG;AACRK,MAAAA,KAAK,EAAE;AACLC,QAAAA,GAAG,EAAChB,KADC;AAELiB,QAAAA,MAAM,EAAC;AAFF,OADC;AAKXC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE,KAAKN,OAAL,CAAaC,aAAb,GAA2B;AAD5B,OALI;AASXO,MAAAA,OAAO,EAAC;AACNC,QAAAA,OAAO,EAAC;AADF,OATG;AAYXC,MAAAA,aAAa,EAAE;AACbD,QAAAA,OAAO,EAAE;AADI,OAZJ;AAeXE,MAAAA,OAAO,EAAE;AACPC,QAAAA,YAAY,EAAE,iBADP;AAEPC,QAAAA,WAAW,EAAE,8BAFN;AAGPC,QAAAA,MAAM,EAAE;AAHD,OAfE;AAoBXC,MAAAA,MAAM,EAAE,CACN;AACExB,QAAAA,IAAI,EAAEA,IADR;AAEEiC,QAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,QAAX,CAFV;AAGEP,QAAAA,IAAI,EAAE,KAAKjB,OAAL,CAAaC,aAAb,KAA+B,OAA/B,GAAuC,WAAvC,GAAmD,QAH3D;AAIEiB,QAAAA,WAAW,EAAE,SAJf;AAKEC,QAAAA,SAAS,EAAE,0BALb;AAMEC,QAAAA,YAAY,EAAE,KANhB;AAOEC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE;AACLC,YAAAA,KAAK,EAAE;AADF;AADD;AAPV,OADM;AApBG,KAAV;AAmCF,SAAKE,QAAL,CAAc;AACbC,MAAAA,UAAU,EAAE7B;AADC,KAAd;AAGJ;;AAECE,EAAAA,aAAa,GACb;AACE,QAAG,KAAKC,OAAL,CAAaC,aAAb,KAA+B,OAAlC,EAA0C;AACxC,WAAKD,OAAL,CAAa2B,UAAb,CAAwBC,SAAxB,CAAkCC,OAAlC,CAA0CC,OAAO,IAAE;AACjDvC,QAAAA,IAAI,CAACwC,IAAL,CAAU,CAACD,OAAO,KAAK,mBAAZ,GAAgC,oBAAhC,GAAqDA,OAAO,CAACE,WAAR,EAAtD,EAA4EC,QAAQ,CAAC,KAAKjC,OAAL,CAAa2B,UAAb,CAAwBpC,IAAxB,CAA6BuC,OAA7B,EAAsCI,SAAtC,CAAgD,KAAKlC,OAAL,CAAa2B,UAAb,CAAwBpC,IAAxB,CAA6BuC,OAA7B,EAAsCI,SAAtC,CAAgDC,MAAhD,GAAuD,CAAvG,EAA0G,CAA1G,CAAD,CAAR,CAAuHC,cAAvH,EAA5E,CAAV;AACD,OAFD;AAGA;AACD;;AACD,SAAKpC,OAAL,CAAa2B,UAAb,CAAwBC,SAAxB,CAAkCC,OAAlC,CAA0CC,OAAO,IAAE;AACjDzC,MAAAA,IAAI,CAACgD,iBAAL,CAAuBR,OAAvB,CAA+BS,CAAC,IAAE;AAC/B,YAAGA,CAAC,CAACR,OAAF,CAAUE,WAAV,OAA4BF,OAAO,CAACE,WAAR,EAA/B,EAAqD;AACnDzC,UAAAA,IAAI,CAACwC,IAAL,CAAU;AAAC,uBAAUO,CAAC,CAACR,OAAb;AAAqB,sBAASQ,CAAC,CAACC,MAAhC;AAAuC,mBAAMD,CAAC,CAACE,GAA/C;AAAmD,mBAAMF,CAAC,CAACG,GAA3D;AAA+D,qBAAQR,QAAQ,CAAC,KAAKjC,OAAL,CAAa2B,UAAb,CAAwBpC,IAAxB,CAA6BuC,OAA7B,EAAsCI,SAAtC,CAAgD,KAAKlC,OAAL,CAAa2B,UAAb,CAAwBpC,IAAxB,CAA6BuC,OAA7B,EAAsCI,SAAtC,CAAgDC,MAAhD,GAAuD,CAAvG,EAA0G,CAA1G,CAAD,CAAR,CAAuHC,cAAvH;AAAvE,WAAV;AACD;AACH,OAJD;AAKD,KAND;AAOD;;AAECM,EAAAA,MAAM,GAAE;AACJ,wBACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG,oBAAC,eAAD;AAAiB,MAAA,eAAe,EAAG,UAAnC;AAA+C,MAAA,UAAU,EAAE1D,UAA3D;AAAuE,MAAA,OAAO,EAAE,KAAKY,KAAL,CAAW8B,UAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADH,CADJ,CADF;AASH;;AAvHkC;;AAAjClC,S,CACGmD,W,GAAcrD,W;AAwHvB,eAAeE,SAAf","sourcesContent":["import React from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport highchartsMap from \"highcharts/modules/map\";\r\nimport world from \"@highcharts/map-collection/custom/world.geo.json\";\r\nimport india from \"@highcharts/map-collection/countries/in/custom/in-all-disputed.geo.json\";\r\nimport code from \"./../countrycordinates.json\";\r\n\r\nimport DataContext from './../dataContext';\r\n\r\nhighchartsMap(Highcharts);\r\n\r\n\r\nvar data=[];\r\nclass CoronoMap extends React.Component{\r\n  static contextType = DataContext;\r\n\r\n  constructor(props)\r\n  {\r\n    super();\r\n    data=[];\r\n    this.state={options:{}};\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.structureData();\r\n    let options={};\r\n    if(this.context.presentRegion === 'India')\r\n    options = {\r\n      chart: {\r\n        map:india,\r\n        height:320\r\n      },\r\n      title: {\r\n        text: this.context.presentRegion+\" Map Plot with Cases <span className='fa fa-expand'></span>\",\r\n        useHTML:true\r\n      },      \r\n      credits:{\r\n        enabled:false\r\n      },\r\n      mapNavigation: {\r\n        enabled: true,\r\n        \r\n      },\r\n      tooltip: {\r\n        headerFormat: '{point.key}<br>',\r\n        pointFormat: 'Cases : <b>{point.value}</b>',\r\n        shared: true\r\n    },\r\n      series: [\r\n        {\r\n          mapData: india,\r\n          data: data,\r\n          name: this.context.presentRegion === 'World'?'Countries':'States',\r\n          borderColor: '#A0A0A0',\r\n          nullColor: 'rgba(200, 200, 200, 0.3)',\r\n         showInLegend: false,\r\n          states: {\r\n            hover: {\r\n              color: \"red\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }\r\n    else\r\n       options = {\r\n         chart: {\r\n           map:world,\r\n           height:320\r\n      },\r\n      title: {\r\n        text: this.context.presentRegion+\" Map Plot with Cases\"\r\n      },\r\n      \r\n      credits:{\r\n        enabled:false\r\n      },\r\n      mapNavigation: {\r\n        enabled: true,\r\n      },\r\n      tooltip: {\r\n        headerFormat: '{point.key}<br>',\r\n        pointFormat: 'Cases : <b>{point.value}</b>',\r\n        shared: true\r\n    },\r\n      series: [\r\n        {\r\n          data: data,\r\n          joinBy: [\"iso-a3\", \"alpha3\"],\r\n          name: this.context.presentRegion === 'World'?'Countries':'States',\r\n          borderColor: '#A0A0A0',\r\n          nullColor: 'rgba(200, 200, 200, 0.3)',\r\n          showInLegend: false,\r\n          states: {\r\n            hover: {\r\n              color: \"red\"\r\n            }\r\n          }\r\n        }\r\n      ]};\r\n     this.setState({\r\n      mapOptions: options\r\n  });\r\n}\r\n\r\n  structureData()\r\n  {\r\n    if(this.context.presentRegion === 'India'){\r\n      this.context.actualData.countries.forEach(country=>{\r\n        data.push([country === \"Arunachal Pradesh\"?\"arunanchal pradesh\":country.toLowerCase(),parseInt(this.context.actualData.data[country].confirmed[this.context.actualData.data[country].confirmed.length-1][1]).toLocaleString()])\r\n      })\r\n      return;\r\n    }\r\n    this.context.actualData.countries.forEach(country=>{\r\n      code.ref_country_codes.forEach(x=>{\r\n         if(x.country.toLowerCase() === country.toLowerCase()){\r\n           data.push({\"country\":x.country,\"alpha3\":x.alpha3,\"lat\":x.lat,\"lon\":x.lon,\"value\":parseInt(this.context.actualData.data[country].confirmed[this.context.actualData.data[country].confirmed.length-1][1]).toLocaleString()})\r\n         }\r\n      })\r\n    })\r\n  }\r\n\r\n    render(){\r\n        return (\r\n          <div className=\"col-xl-6 col-md-12\">\r\n              <div className=\"card\">\r\n                 <div className=\"card-body\">\r\n                    <HighchartsReact constructorType ={'mapChart'} highcharts={Highcharts} options={this.state.mapOptions} />\r\n                 </div>\r\n              </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\nexport default CoronoMap;"]},"metadata":{},"sourceType":"module"}