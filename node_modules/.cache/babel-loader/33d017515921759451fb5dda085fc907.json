{"ast":null,"code":"var _jsxFileName = \"/Users/matchajanardhanarao/Documents/coronodashboard/src/components/ColumnGraph.js\";\nimport React from 'react';\nimport Highcharts from 'highcharts/highcharts';\nimport drilldown from 'highcharts/modules/drilldown.js';\nimport HighchartsReact from 'highcharts-react-official';\nimport { TabView, TabPanel } from 'primereact/tabview';\ndrilldown(Highcharts);\n\nclass ColumnGraph extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      options: {}\n    };\n  }\n\n  componentDidMount() {\n    this.structureData(\"confirmed\");\n  }\n\n  structureData(val) {\n    this.setState({\n      options: {}\n    });\n\n    try {\n      let data = this.props.data.total[val];\n      let i = 0,\n          DaysInMonths = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n      let nameOfMonths = {\n        0: \"Jan\",\n        1: \"Feb\",\n        2: \"March\",\n        3: \"Apr\",\n        4: \"May\",\n        5: \"Jun\",\n        6: \"Jul\",\n        7: \"Aug\",\n        8: \"Sept\",\n        9: \"Oct\",\n        10: \"Nov\",\n        11: \"Dec\"\n      };\n      let obj = [],\n          month = 0,\n          prevdata = 0,\n          ddrObject = [],\n          daysdata = [],\n          daysPrevData = 0;\n      data.forEach((element, index) => {\n        month = new Date(element[0]).toISOString().split(\"-\")[1];\n        daysPrevData = 0;\n        if (index > 0) daysPrevData += data[index - 1][1];\n        daysdata.push([new Date(element[0]).toISOString().split(\"-\")[2].split(\"T\")[0], element[1] - daysPrevData]);\n\n        if (new Date(element[0]).toISOString().split(\"-\")[2].split(\"T\")[0] == DaysInMonths[month - 1]) {\n          ddrObject.push({\n            name: nameOfMonths[month - 1],\n            \"id\": i.toString(),\n            \"data\": daysdata\n          });\n          daysdata = [];\n          if (i > 0) prevdata += obj[i - 1].y;\n          obj[i] = {\n            name: nameOfMonths[month - 1],\n            \"y\": element[1] - prevdata,\n            drilldown: i.toString()\n          };\n          i++;\n        } else if (index == data.length - 1) {\n          prevdata += obj[i - 1].y;\n          ddrObject.push({\n            name: nameOfMonths[month - 1],\n            \"id\": i.toString(),\n            \"data\": daysdata\n          });\n          daysdata = [];\n          obj[i] = {\n            name: nameOfMonths[month - 1],\n            \"y\": element[1] - prevdata,\n            drilldown: i.toString()\n          };\n        }\n      });\n      this.setState({\n        options: {\n          chart: {\n            type: 'column',\n            height: 370\n          },\n          title: {\n            text: this.props.presentRegion + ' Coronovirus Cases, 2020'\n          },\n          subtitle: {\n            text: 'Monthly/Daily Cases'\n          },\n          xAxis: {\n            type: 'category'\n          },\n          yAxis: {\n            title: {\n              text: 'Cases'\n            }\n          },\n          legend: {\n            enabled: false\n          },\n          credits: {\n            enabled: false\n          },\n          plotOptions: {\n            series: {\n              borderWidth: 0,\n              dataLabels: {\n                enabled: true,\n                format: '{point.y}'\n              }\n            }\n          },\n          accessibility: {\n            announceNewData: {\n              enabled: true\n            }\n          },\n          tooltip: {\n            enabled: true,\n            formatter: function () {\n              return this.series.name + \" <b>\" + this.point.name + \"</b><br/>\" + val + \":<b>\" + this.point.y.toLocaleString() + \"</b>\";\n            },\n            useHTML: true\n          },\n          series: [{\n            name: \"Month\",\n            data: obj\n          }],\n          drilldown: {\n            name: \"Dates\",\n            series: ddrObject\n          }\n        }\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // <div className=\"card\">\n      //     <div className=\"card-header\">\n      //         <span onClick={()=>this.structureData(\"confirmed\")}>Confirmed</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span onClick={()=>this.structureData(\"recovered\")}>Recovered</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span onClick={()=>this.structureData(\"deaths\")}>Deaths</span>\n      //     </div>\n      //     <hr></hr>\n      //     <div className=\"card-body\">\n      //       <HighchartsReact highcharts={Highcharts} options={this.state.options} />\n      //     </div>\n      // </div>\n      React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(TabView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TabPanel, {\n        header: \"Confirmed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(HighchartsReact, {\n        highcharts: Highcharts,\n        options: this.state.options,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(TabPanel, {\n        header: \"Recovered\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }\n      }, \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.\")), /*#__PURE__*/React.createElement(TabPanel, {\n        header: \"Deaths\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 29\n        }\n      }, \"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\")))))\n    );\n  }\n\n}\n\nexport default ColumnGraph;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/components/ColumnGraph.js"],"names":["React","Highcharts","drilldown","HighchartsReact","TabView","TabPanel","ColumnGraph","Component","constructor","props","state","options","componentDidMount","structureData","val","setState","data","total","i","DaysInMonths","nameOfMonths","obj","month","prevdata","ddrObject","daysdata","daysPrevData","forEach","element","index","Date","toISOString","split","push","name","toString","y","length","chart","type","height","title","text","presentRegion","subtitle","xAxis","yAxis","legend","enabled","credits","plotOptions","series","borderWidth","dataLabels","format","accessibility","announceNewData","tooltip","formatter","point","toLocaleString","useHTML","err","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Highcharts from 'highcharts/highcharts';\r\nimport drilldown from 'highcharts/modules/drilldown.js'\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { TabView,TabPanel } from 'primereact/tabview';\r\n\r\n\r\n\r\ndrilldown(Highcharts);\r\n\r\nclass ColumnGraph extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super();\r\n        this.state={\r\n        options: {\r\n        }\r\n       }\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        this.structureData(\"confirmed\");\r\n    }\r\n\r\n    structureData(val)\r\n    { \r\n       this.setState({options:{}})\r\n      try{\r\n        let data =this.props.data.total[val];\r\n\r\n        let i=0,DaysInMonths =[31,29,31,30,31,30,31,31,30,31,30,31];\r\n        let nameOfMonths = {0:\"Jan\",1:\"Feb\",2:\"March\",3:\"Apr\",4:\"May\",5:\"Jun\",6:\"Jul\",7:\"Aug\",8:\"Sept\",9:\"Oct\",10:\"Nov\",11:\"Dec\"}\r\n\r\n        let obj =[],month=0,prevdata=0,ddrObject=[],daysdata=[],daysPrevData=0;\r\n\r\n\r\n        data.forEach((element,index) => {\r\n            month = new Date(element[0]).toISOString().split(\"-\")[1];\r\n            daysPrevData = 0;\r\n\r\n            if(index>0)\r\n                daysPrevData+=data[index-1][1];\r\n        \r\n            daysdata.push([new Date(element[0]).toISOString().split(\"-\")[2].split(\"T\")[0],element[1]-daysPrevData]);\r\n\r\n            if(new Date(element[0]).toISOString().split(\"-\")[2].split(\"T\")[0] == DaysInMonths[month-1]){\r\n\r\n                ddrObject.push({name:nameOfMonths[month-1],\"id\":i.toString(),\"data\":daysdata});\r\n                daysdata=[];\r\n                if(i>0) prevdata+=obj[i-1].y;\r\n\r\n                obj[i]={name:nameOfMonths[month-1],\"y\":element[1]-prevdata,drilldown:i.toString()};\r\n\r\n                i++;\r\n            }\r\n            else if(index == data.length-1){\r\n                prevdata+=obj[i-1].y;\r\n                ddrObject.push({name:nameOfMonths[month-1],\"id\":i.toString(),\"data\":daysdata});\r\n                daysdata=[];\r\n                obj[i] = {name:nameOfMonths[month-1],\"y\":element[1]-prevdata,drilldown:i.toString()};\r\n            }      \r\n        });\r\n\r\n        this.setState({\r\n            options: {\r\n                chart: {\r\n                    type: 'column',\r\n                    height:370\r\n                },\r\n                title: {\r\n                    text: this.props.presentRegion+' Coronovirus Cases, 2020'\r\n                },\r\n                subtitle: {\r\n                    text: 'Monthly/Daily Cases'\r\n                },\r\n                \r\n                xAxis: {\r\n                    type: 'category',\r\n                },\r\n                yAxis: {\r\n                    title: {\r\n                        text: 'Cases'\r\n                    }\r\n                },\r\n                legend: {\r\n                    enabled: false\r\n                },\r\n                credits:{\r\n                    enabled:false\r\n                },\r\n                plotOptions: {\r\n                    series: {\r\n                        borderWidth: 0,\r\n                        dataLabels: {\r\n                            enabled: true,\r\n                            format: '{point.y}'\r\n                        }\r\n                    }\r\n                },\r\n                accessibility: {\r\n                    announceNewData: {\r\n                        enabled: true\r\n                    }\r\n                },\r\n                tooltip: {\r\n                    enabled:true,\r\n                    formatter: function() {\r\n                        return this.series.name+\" <b>\"+this.point.name+\"</b><br/>\" +val+\":<b>\"+(this.point.y).toLocaleString()+\"</b>\"\r\n                    },\r\n                     useHTML:true\r\n                },\r\n            \r\n                series: [\r\n                    {\r\n                       name:\"Month\", \r\n                        data:obj,\r\n                    }\r\n                ],\r\n                drilldown: {\r\n                    name:\"Dates\",\r\n                    series: ddrObject\r\n                }\r\n            }\r\n        });\r\n       }\r\n       catch(err)\r\n       {\r\n           console.log(err);\r\n       }\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            // <div className=\"card\">\r\n            //     <div className=\"card-header\">\r\n            //         <span onClick={()=>this.structureData(\"confirmed\")}>Confirmed</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span onClick={()=>this.structureData(\"recovered\")}>Recovered</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span onClick={()=>this.structureData(\"deaths\")}>Deaths</span>\r\n            //     </div>\r\n            //     <hr></hr>\r\n            //     <div className=\"card-body\">\r\n                 \r\n            //       <HighchartsReact highcharts={Highcharts} options={this.state.options} />\r\n            //     </div>\r\n            // </div>\r\n            \r\n            <div className=\"card\">\r\n              \r\n               <div className=\"card-body\">\r\n                    <TabView>\r\n                        <TabPanel header=\"Confirmed\">\r\n                            <HighchartsReact highcharts={Highcharts} options={this.state.options} />\r\n                        </TabPanel>\r\n                        <TabPanel header=\"Recovered\">\r\n                            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi\r\n                            architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\r\n                        voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.</p>\r\n                        </TabPanel>\r\n                        <TabPanel header=\"Deaths\">\r\n                            <p>At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati\r\n                            cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.\r\n                        Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.</p>\r\n                        </TabPanel>\r\n                    </TabView>\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColumnGraph;"]},"metadata":{},"sourceType":"module"}