{"ast":null,"code":"import _classCallCheck from\"/Users/matchajanardhanarao/Documents/coronodashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/matchajanardhanarao/Documents/coronodashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/matchajanardhanarao/Documents/coronodashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/matchajanardhanarao/Documents/coronodashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import Highcharts from'highcharts/highcharts';import drilldown from'highcharts/modules/drilldown.js';import HighchartsReact from'highcharts-react-official';drilldown(Highcharts);var ColumnGraph=/*#__PURE__*/function(_React$Component){_inherits(ColumnGraph,_React$Component);var _super=_createSuper(ColumnGraph);function ColumnGraph(props){var _this;_classCallCheck(this,ColumnGraph);_this=_super.call(this);_this.state={options:{//     chart: {\n//         type: 'column',\n//         height:320,\n//     },\n//     title: {\n//         text: 'Monthly Cases Year (2020)'\n//     },\n//     subtitle: {\n//         text: 'Coronovirus Cases    '\n//     },\n//     xAxis: {\n//         categories: [\n//             'Jan',\n//             'Feb',\n//             'Mar',\n//             'Apr',\n//             'May',\n//             'Jun',\n//             'Jul',\n//             'Aug',\n//             'Sep',\n//             'Oct',\n//             'Nov',\n//             'Dec'\n//         ],\n//     },\n//     credits:{\n//         enabled:false\n//     },\n//     yAxis: {\n//         min: 100,\n//         title: {\n//             text: 'Cases'\n//         }\n//     },\n//     series: [{\n//         name:'Cases',\n//         data: [1200,5009,19000,30000,39900, 47800, 79333]\n//     }]\n// }};\n}};//this.getData(props.presentRegion)\nreturn _this;}_createClass(ColumnGraph,[{key:\"componentDidMount\",value:function componentDidMount(){this.structureData(this.props.data);}},{key:\"structureData\",value:function structureData(data){var i=0,DaysInMonths=[31,29,31,30,31,30,31,31,30,31,30,31];var obj=[],month=0,prevdata=0,ddrObject=[],daysdata=[],daysPrevData=0;data.forEach(function(element,index){month=element.Date.split(\"-\")[1];daysPrevData=0;if(index>0){//    daysdata.forEach(x=>daysPrevData+=x[1])\ndaysPrevData+=data[index-1].Cases;}daysdata.push([element.Date.split(\"-\")[2].split(\"T\")[0],element.Cases-daysPrevData]);if(element.Date.split(\"-\")[2].split(\"T\")[0]==DaysInMonths[month-1]){ddrObject.push({\"id\":i.toString(),\"data\":daysdata});daysdata=[];if(i>0)prevdata+=obj[i-1].y;obj[i]={\"y\":element.Cases-prevdata,drilldown:i.toString()};i++;}else if(index==data.length-1){prevdata+=obj[i-1].y;ddrObject.push({\"id\":i.toString(),\"data\":daysdata});daysdata=[];obj[i]={\"y\":element.Cases-prevdata,drilldown:i.toString()};}});this.setState({options:{chart:{type:'column',height:320},title:{text:this.props.presentRegion+' Coronovirus Cases , 2020'},subtitle:{text:'Monthly/Daily Cases'},xAxis:{type:'category'},yAxis:{title:{text:'Cases'}},legend:{enabled:false},credits:{enabled:false},plotOptions:{series:{borderWidth:0,dataLabels:{enabled:true,format:'{point.y}'}}},// tooltip: {\n//     headerFormat: '<span style=\"font-size:11px\">{series.name}</span><br>',\n//     pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}%</b> of total<br/>'\n// },\nseries:[{name:\"Cases\",data:obj}],drilldown:{series:ddrObject}}});}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"card-body\"},/*#__PURE__*/React.createElement(HighchartsReact,{highcharts:Highcharts,options:this.state.options})));}}]);return ColumnGraph;}(React.Component);export default ColumnGraph;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/components/ColumnGraph.js"],"names":["React","Highcharts","drilldown","HighchartsReact","ColumnGraph","props","state","options","structureData","data","i","DaysInMonths","obj","month","prevdata","ddrObject","daysdata","daysPrevData","forEach","element","index","Date","split","Cases","push","toString","y","length","setState","chart","type","height","title","text","presentRegion","subtitle","xAxis","yAxis","legend","enabled","credits","plotOptions","series","borderWidth","dataLabels","format","name","Component"],"mappings":"4pBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,uBAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,iCAAtB,CACA,MAAOC,CAAAA,eAAP,KAA4B,2BAA5B,CAEAD,SAAS,CAACD,UAAD,CAAT,C,GAEMG,CAAAA,W,sHAEF,qBAAYC,KAAZ,CACA,6CACI,wBACA,MAAKC,KAAL,CAAW,CACXC,OAAO,CAAE,CACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAzCS,CADE,CAAX,CA6CH;AA/CD,aAgDC,C,qFAGD,CACI,KAAKC,aAAL,CAAmB,KAAKH,KAAL,CAAWI,IAA9B,EACH,C,oDAEaA,I,CACd,CACI,GAAIC,CAAAA,CAAC,CAAC,CAAN,CAAQC,YAAY,CAAE,CAAC,EAAD,CAAI,EAAJ,CAAO,EAAP,CAAU,EAAV,CAAa,EAAb,CAAgB,EAAhB,CAAmB,EAAnB,CAAsB,EAAtB,CAAyB,EAAzB,CAA4B,EAA5B,CAA+B,EAA/B,CAAkC,EAAlC,CAAtB,CAEA,GAAIC,CAAAA,GAAG,CAAE,EAAT,CAAYC,KAAK,CAAC,CAAlB,CAAoBC,QAAQ,CAAC,CAA7B,CAA+BC,SAAS,CAAC,EAAzC,CAA4CC,QAAQ,CAAC,EAArD,CAAwDC,YAAY,CAAC,CAArE,CAGAR,IAAI,CAACS,OAAL,CAAa,SAACC,OAAD,CAASC,KAAT,CAAmB,CAC5BP,KAAK,CAAGM,OAAO,CAACE,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAR,CACAL,YAAY,CAAG,CAAf,CAEA,GAAGG,KAAK,CAAC,CAAT,CAAW,CACP;AACAH,YAAY,EAAER,IAAI,CAACW,KAAK,CAAC,CAAP,CAAJ,CAAcG,KAA5B,CAEF,CAEFP,QAAQ,CAACQ,IAAT,CAAc,CAACL,OAAO,CAACE,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,EAA2BA,KAA3B,CAAiC,GAAjC,EAAsC,CAAtC,CAAD,CAA0CH,OAAO,CAACI,KAAR,CAAcN,YAAxD,CAAd,EAEA,GAAGE,OAAO,CAACE,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,EAA2BA,KAA3B,CAAiC,GAAjC,EAAsC,CAAtC,GAA4CX,YAAY,CAACE,KAAK,CAAC,CAAP,CAA3D,CAAqE,CAEjEE,SAAS,CAACS,IAAV,CAAe,CAAC,KAAKd,CAAC,CAACe,QAAF,EAAN,CAAmB,OAAOT,QAA1B,CAAf,EACAA,QAAQ,CAAC,EAAT,CACA,GAAGN,CAAC,CAAC,CAAL,CAAQI,QAAQ,EAAEF,GAAG,CAACF,CAAC,CAAC,CAAH,CAAH,CAASgB,CAAnB,CAERd,GAAG,CAACF,CAAD,CAAH,CAAO,CAAC,IAAIS,OAAO,CAACI,KAAR,CAAcT,QAAnB,CAA4BZ,SAAS,CAACQ,CAAC,CAACe,QAAF,EAAtC,CAAP,CAEAf,CAAC,GACJ,CATD,IAUK,IAAGU,KAAK,EAAIX,IAAI,CAACkB,MAAL,CAAY,CAAxB,CAA0B,CAC3Bb,QAAQ,EAAEF,GAAG,CAACF,CAAC,CAAC,CAAH,CAAH,CAASgB,CAAnB,CACAX,SAAS,CAACS,IAAV,CAAe,CAAC,KAAKd,CAAC,CAACe,QAAF,EAAN,CAAmB,OAAOT,QAA1B,CAAf,EACAA,QAAQ,CAAC,EAAT,CACAJ,GAAG,CAACF,CAAD,CAAH,CAAS,CAAC,IAAIS,OAAO,CAACI,KAAR,CAAcT,QAAnB,CAA4BZ,SAAS,CAACQ,CAAC,CAACe,QAAF,EAAtC,CAAT,CACH,CACJ,CA5BD,EA8BA,KAAKG,QAAL,CAAc,CACVrB,OAAO,CAAE,CACLsB,KAAK,CAAE,CACHC,IAAI,CAAE,QADH,CAEHC,MAAM,CAAC,GAFJ,CADF,CAKLC,KAAK,CAAE,CACHC,IAAI,CAAE,KAAK5B,KAAL,CAAW6B,aAAX,CAAyB,2BAD5B,CALF,CAQLC,QAAQ,CAAE,CACNF,IAAI,CAAE,qBADA,CARL,CAYLG,KAAK,CAAE,CACHN,IAAI,CAAE,UADH,CAZF,CAeLO,KAAK,CAAE,CACHL,KAAK,CAAE,CACHC,IAAI,CAAE,OADH,CADJ,CAfF,CAoBLK,MAAM,CAAE,CACJC,OAAO,CAAE,KADL,CApBH,CAuBLC,OAAO,CAAC,CACJD,OAAO,CAAC,KADJ,CAvBH,CA0BLE,WAAW,CAAE,CACTC,MAAM,CAAE,CACJC,WAAW,CAAE,CADT,CAEJC,UAAU,CAAE,CACRL,OAAO,CAAE,IADD,CAERM,MAAM,CAAE,WAFA,CAFR,CADC,CA1BR,CAoCL;AACA;AACA;AACA;AAEAH,MAAM,CAAE,CACJ,CACGI,IAAI,CAAC,OADR,CAEIrC,IAAI,CAACG,GAFT,CADI,CAzCH,CA+CLV,SAAS,CAAE,CACPwC,MAAM,CAAE3B,SADD,CA/CN,CADC,CAAd,EAqDH,C,uCAGD,CACI,mBACI,2BAAK,SAAS,CAAC,MAAf,eACI,2BAAK,SAAS,CAAC,WAAf,eACE,oBAAC,eAAD,EAAiB,UAAU,CAAEd,UAA7B,CAAyC,OAAO,CAAE,KAAKK,KAAL,CAAWC,OAA7D,EADF,CADJ,CADJ,CAOH,C,yBA/JqBP,KAAK,CAAC+C,S,EAkKhC,cAAe3C,CAAAA,WAAf","sourcesContent":["import React from 'react';\r\nimport Highcharts from 'highcharts/highcharts';\r\nimport drilldown from 'highcharts/modules/drilldown.js'\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\ndrilldown(Highcharts);\r\n\r\nclass ColumnGraph extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super();\r\n        this.state={\r\n        options: {\r\n        //     chart: {\r\n        //         type: 'column',\r\n        //         height:320,\r\n        //     },\r\n        //     title: {\r\n        //         text: 'Monthly Cases Year (2020)'\r\n        //     },\r\n        //     subtitle: {\r\n        //         text: 'Coronovirus Cases    '\r\n        //     },\r\n        //     xAxis: {\r\n        //         categories: [\r\n        //             'Jan',\r\n        //             'Feb',\r\n        //             'Mar',\r\n        //             'Apr',\r\n        //             'May',\r\n        //             'Jun',\r\n        //             'Jul',\r\n        //             'Aug',\r\n        //             'Sep',\r\n        //             'Oct',\r\n        //             'Nov',\r\n        //             'Dec'\r\n        //         ],\r\n        //     },\r\n        //     credits:{\r\n        //         enabled:false\r\n        //     },\r\n        //     yAxis: {\r\n        //         min: 100,\r\n        //         title: {\r\n        //             text: 'Cases'\r\n        //         }\r\n        //     },\r\n        //     series: [{\r\n        //         name:'Cases',\r\n        //         data: [1200,5009,19000,30000,39900, 47800, 79333]\r\n        \r\n        //     }]\r\n        // }};\r\n        }\r\n    }\r\n     //this.getData(props.presentRegion)\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        this.structureData(this.props.data);\r\n    }\r\n\r\n    structureData(data)\r\n    { \r\n        let i=0,DaysInMonths =[31,29,31,30,31,30,31,31,30,31,30,31];\r\n\r\n        let obj =[],month=0,prevdata=0,ddrObject=[],daysdata=[],daysPrevData=0;\r\n\r\n\r\n        data.forEach((element,index) => {\r\n            month = element.Date.split(\"-\")[1];\r\n            daysPrevData = 0;\r\n\r\n            if(index>0){\r\n                //    daysdata.forEach(x=>daysPrevData+=x[1])\r\n                daysPrevData+=data[index-1].Cases;\r\n                \r\n             }\r\n        \r\n            daysdata.push([element.Date.split(\"-\")[2].split(\"T\")[0],element.Cases-daysPrevData]);\r\n\r\n            if(element.Date.split(\"-\")[2].split(\"T\")[0] == DaysInMonths[month-1]){\r\n\r\n                ddrObject.push({\"id\":i.toString(),\"data\":daysdata});\r\n                daysdata=[];\r\n                if(i>0) prevdata+=obj[i-1].y;\r\n\r\n                obj[i]={\"y\":element.Cases-prevdata,drilldown:i.toString()};\r\n\r\n                i++;\r\n            }\r\n            else if(index == data.length-1){\r\n                prevdata+=obj[i-1].y;\r\n                ddrObject.push({\"id\":i.toString(),\"data\":daysdata});\r\n                daysdata=[];\r\n                obj[i] = {\"y\":element.Cases-prevdata,drilldown:i.toString()};\r\n            }      \r\n        });\r\n\r\n        this.setState({\r\n            options: {\r\n                chart: {\r\n                    type: 'column',\r\n                    height:320\r\n                },\r\n                title: {\r\n                    text: this.props.presentRegion+' Coronovirus Cases , 2020'\r\n                },\r\n                subtitle: {\r\n                    text: 'Monthly/Daily Cases'\r\n                },\r\n                \r\n                xAxis: {\r\n                    type: 'category'\r\n                },\r\n                yAxis: {\r\n                    title: {\r\n                        text: 'Cases'\r\n                    }\r\n                },\r\n                legend: {\r\n                    enabled: false\r\n                },\r\n                credits:{\r\n                    enabled:false\r\n                },\r\n                plotOptions: {\r\n                    series: {\r\n                        borderWidth: 0,\r\n                        dataLabels: {\r\n                            enabled: true,\r\n                            format: '{point.y}'\r\n                        }\r\n                    }\r\n                },\r\n            \r\n                // tooltip: {\r\n                //     headerFormat: '<span style=\"font-size:11px\">{series.name}</span><br>',\r\n                //     pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}%</b> of total<br/>'\r\n                // },\r\n            \r\n                series: [\r\n                    {\r\n                       name:\"Cases\", \r\n                        data:obj\r\n                   }\r\n                ],\r\n                drilldown: {\r\n                    series: ddrObject\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <HighchartsReact highcharts={Highcharts} options={this.state.options} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColumnGraph;"]},"metadata":{},"sourceType":"module"}