{"ast":null,"code":"var _jsxFileName = \"/Users/matchajanardhanarao/Documents/coronodashboard/src/components/Rates.js\";\nimport React from \"react\";\nimport { ProgressBar } from 'primereact/progressbar';\n\nclass Rates extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      active: {},\n      recovered: {},\n      deaths: {}\n    };\n  }\n\n  componentDidMount() {\n    this.structureData();\n  }\n\n  async structureData() {\n    console.log(this.props.data, \"cons\");\n    let active = {},\n        recovered = {},\n        deaths = {};\n    let totalConfirmed = this.props.data.total.recovered[this.props.data.total.recovered.length - 1];\n    let totalRecovered = this.props.data.total.recovered[this.props.data.total.recovered.length - 1];\n    let totalDeaths = this.props.data.total.deaths[this.props.data.total.deaths.length - 1];\n    let totalActive = totalConfirmed - totalRecovered - totalDeaths; //find the highest active cases rate\n\n    Object.keys(this.props.data.data).forEach((x, index) => {\n      if (index == 0) {\n        active[x] = this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length - 1][1];\n        recovered[x] = this.props.data.data[x].recovered[this.props.data.data[x].recovered.length - 1][1];\n        deaths[x] = this.props.data.data[x].deaths[this.props.data.data[x].deaths.length - 1][1];\n      } else {\n        if (parseInt(Object.values(active)) < this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length - 1][1]) active[Object.keys(active).toString()] = this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length - 1][1];\n        if (parseInt(Object.values(recovered)) < this.props.data.data[x].recovered[this.props.data.data[x].recovered.length - 1][1]) recovered[Object.keys(recovered).toString()] = this.props.data.data[x].recovered[this.props.data.data[x].recovered.length - 1][1] / this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length - 1][1] * 100;\n        if (parseInt(Object.values(deaths)) < this.props.data.data[x].deaths[this.props.data.data[x].deaths.length - 1][1]) deaths[Object.keys(deaths).toString()] = this.props.data.data[x].deaths[this.props.data.data[x].deaths.length - 1][1] / this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length - 1][1] * 100;\n      }\n    });\n    console.log(\"\", recovered, deaths, active);\n    await this.setState({\n      active: active,\n      recovered: recovered,\n      deaths: deaths\n    });\n    console.log(this.state.active);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-3 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      style: {\n        height: \"360px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, \"Highest Active Rate\"), /*#__PURE__*/React.createElement(\"hr\", {\n      style: {\n        color: \"blue\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"left\",\n        fontWeight: \"bold\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, Object.keys(this.state.active).toString()), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, this.state.active[Object.keys(this.state.active).toString()]), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 30\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, \"Highest Recovery Rate\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 55\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"left\",\n        fontWeight: \"bold\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }, Object.keys(this.state.recovered).toString()), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, this.state.recovered[Object.keys(this.state.recovered).toString()]), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 30\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, \"Highest Death Rate\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 52\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"left\",\n        fontWeight: \"bold\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, \"United States\"), /*#__PURE__*/React.createElement(ProgressBar, {\n      value: \"60\",\n      showValue: true,\n      style: {\n        height: '13px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n}\n\nexport default Rates;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/components/Rates.js"],"names":["React","ProgressBar","Rates","Component","constructor","state","active","recovered","deaths","componentDidMount","structureData","console","log","props","data","totalConfirmed","total","length","totalRecovered","totalDeaths","totalActive","Object","keys","forEach","x","index","confirmed","parseInt","values","toString","setState","render","height","color","float","fontWeight"],"mappings":"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","sourcesContent":["import  React  from \"react\";\nimport {ProgressBar} from 'primereact/progressbar';\n\n\nclass Rates extends React.Component{\n    constructor()\n    {\n        super();\n        this.state={active:{},recovered:{},deaths:{}};\n    }\n\n    componentDidMount(){\n        this.structureData();\n    }\n\n   async structureData(){\n         console.log(this.props.data,\"cons\");\n         let active = {},recovered={},deaths={};\n         let totalConfirmed = this.props.data.total.recovered[this.props.data.total.recovered.length-1];\n         let totalRecovered = this.props.data.total.recovered[this.props.data.total.recovered.length-1];\n         let totalDeaths = this.props.data.total.deaths[this.props.data.total.deaths.length-1];\n\n         let totalActive = totalConfirmed-totalRecovered-totalDeaths;\n        //find the highest active cases rate\n\n        Object.keys(this.props.data.data).forEach((x,index)=>{\n                if(index==0){\n                    active[x]=this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1];\n                    recovered[x]=this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1];\n                    deaths[x]=this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1];\n                }\n                else{\n                if(parseInt(Object.values(active))< this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])\n                    active[Object.keys(active).toString()]=this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1];\n\n                if(parseInt(Object.values(recovered))< this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1])\n                   recovered[Object.keys(recovered).toString()]=(this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100;\n\n                if(parseInt(Object.values(deaths))< this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1])\n                    deaths[Object.keys(deaths).toString()]=(this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100;\n                }\n        })  \n    console.log(\"\",recovered,deaths,active);\n    await this.setState({active:active,recovered:recovered,deaths:deaths});\n    console.log(this.state.active);\n\n\n    }\n\n\n    render(){\n        return(\n            <div className=\"col-xl-3 col-md-12\">\n              <div className=\"card\" style={{height:\"360px\"}}>\n                <div className=\"card-body\">\n                    <span>Highest Active Rate</span><hr style={{color:\"blue\"}}></hr>\n                    <span style={{float:\"left\",fontWeight:\"bold\"}}>{Object.keys(this.state.active).toString()}</span>\n                    <span style={{float:\"right\"}}>{this.state.active[Object.keys(this.state.active).toString()]}</span>\n                    <br></br><br></br>\n                    <span>Highest Recovery Rate</span><hr></hr>\n                    <span style={{float:\"left\",fontWeight:\"bold\"}}>{Object.keys(this.state.recovered).toString()}</span>\n                    <span style={{float:\"right\"}}>{this.state.recovered[Object.keys(this.state.recovered).toString()]}</span>\n                    <br></br><br></br>\n                    <span>Highest Death Rate</span><hr></hr>\n                    <span style={{float:\"left\",fontWeight:\"bold\"}}>United States</span>\n                    <ProgressBar value=\"60\" showValue ={true} style={{height:'13px'}} />\n\n                </div>\n              </div>\n            </div>\n        )\n    }\n}\n\nexport default Rates;"]},"metadata":{},"sourceType":"module"}