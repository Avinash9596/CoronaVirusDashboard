{"ast":null,"code":"var _jsxFileName = \"/Users/matchajanardhanarao/Documents/coronodashboard/src/components/Rates.js\";\nimport React from \"react\";\nimport { ProgressBar } from 'primereact/progressbar';\n\nclass Rates extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      active: {},\n      recovered: {},\n      deaths: {}\n    };\n  }\n\n  componentDidMount() {\n    this.structureData();\n  }\n\n  async structureData() {\n    console.log(this.props.data, \"cons\");\n    let active = {},\n        recovered = {},\n        deaths = {};\n    let totalConfirmed = this.props.data.total.recovered[this.props.data.total.recovered.length - 1];\n    let totalRecovered = this.props.data.total.recovered[this.props.data.total.recovered.length - 1];\n    let totalDeaths = this.props.data.total.deaths[this.props.data.total.deaths.length - 1];\n    let totalActive = totalConfirmed - totalRecovered - totalDeaths; //find the highest active cases rate\n\n    Object.keys(this.props.data.data).forEach((x, index) => {\n      if (index == 0) {\n        active[x] = this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length - 1][1];\n        recovered[x] = this.props.data.data[x].recovered[this.props.data.data[x].recovered.length - 1][1];\n        deaths[x] = this.props.data.data[x].deaths[this.props.data.data[x].deaths.length - 1][1];\n      } else {\n        if (parseInt(Object.values(active)) < this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length - 1][1]) {\n          active = {};\n          active[x] = this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length - 1][1];\n        }\n\n        if (parseInt(Object.values(recovered)) < this.props.data.data[x].recovered[this.props.data.data[x].recovered.length - 1][1]) {\n          recovered = {};\n          recovered[x] = (this.props.data.data[x].recovered[this.props.data.data[x].recovered.length - 1][1] / this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length - 1][1] * 100).toFixed(2);\n        }\n\n        if (parseInt(Object.values(deaths)) < this.props.data.data[x].deaths[this.props.data.data[x].deaths.length - 1][1]) {\n          deaths = {};\n          deaths[x] = (this.props.data.data[x].deaths[this.props.data.data[x].deaths.length - 1][1] / this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length - 1][1] * 100).toFixed(2);\n        }\n      }\n    });\n    console.log(\"\", recovered, deaths, active);\n    await this.setState({\n      active: active,\n      recovered: recovered,\n      deaths: deaths\n    });\n    console.log(this.state.active);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-3 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      style: {\n        height: \"360px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, \"Highest Active Rate\"), /*#__PURE__*/React.createElement(\"hr\", {\n      style: {\n        border: \"2px solid red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, Object.keys(this.state.active).toString()), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"right\",\n        color: \"#ef3c3c\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, this.state.active[Object.keys(this.state.active).toString()], \"%\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 30\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, \"Highest Recovery Rate\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 78\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, Object.keys(this.state.recovered).toString()), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"right\",\n        color: \"#009933\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    }, this.state.recovered[Object.keys(this.state.recovered).toString()], \"%\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 30\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, \"Highest Death Rate\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 75\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, Object.keys(this.state.deaths).toString()), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"right\",\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, this.state.deaths[Object.keys(this.state.deaths).toString()], \"%\"))));\n  }\n\n}\n\nexport default Rates;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/components/Rates.js"],"names":["React","ProgressBar","Rates","Component","constructor","state","active","recovered","deaths","componentDidMount","structureData","console","log","props","data","totalConfirmed","total","length","totalRecovered","totalDeaths","totalActive","Object","keys","forEach","x","index","confirmed","parseInt","values","toFixed","setState","render","height","float","border","toString","color"],"mappings":"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","sourcesContent":["import  React  from \"react\";\nimport {ProgressBar} from 'primereact/progressbar';\n\n\nclass Rates extends React.Component{\n    constructor()\n    {\n        super();\n        this.state={active:{},recovered:{},deaths:{}};\n    }\n\n    componentDidMount(){\n        this.structureData();\n    }\n\n   async structureData(){\n         console.log(this.props.data,\"cons\");\n         let active = {},recovered={},deaths={};\n         let totalConfirmed = this.props.data.total.recovered[this.props.data.total.recovered.length-1];\n         let totalRecovered = this.props.data.total.recovered[this.props.data.total.recovered.length-1];\n         let totalDeaths = this.props.data.total.deaths[this.props.data.total.deaths.length-1];\n\n         let totalActive = totalConfirmed-totalRecovered-totalDeaths;\n        //find the highest active cases rate\n\n        Object.keys(this.props.data.data).forEach((x,index)=>{\n                if(index==0){\n                    active[x]=this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1];\n                    recovered[x]=this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1];\n                    deaths[x]=this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1];\n                }\n                else{\n                if(parseInt(Object.values(active))< this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1]){\n                    active={};\n                    active[x]=this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1];\n                }\n\n                if(parseInt(Object.values(recovered))< this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]){\n                    recovered={};\n                   recovered[x]=((this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100).toFixed(2);\n                }\n\n                if(parseInt(Object.values(deaths))< this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1]){\n                    deaths={};\n                    deaths[x]=((this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100).toFixed(2);\n                }\n                }\n        })  \n    console.log(\"\",recovered,deaths,active);\n    await this.setState({active:active,recovered:recovered,deaths:deaths});\n    console.log(this.state.active);\n\n\n    }\n\n\n    render(){\n        return(\n            <div className=\"col-xl-3 col-md-12\">\n              <div className=\"card\" style={{height:\"360px\"}}>\n                <div className=\"card-body\">\n                    <span style={{float:\"left\"}}>Highest Active Rate</span>\n                    <hr style={{border:\"2px solid red\"}}></hr>\n                    <span style={{float:\"left\"}}>{Object.keys(this.state.active).toString()}</span>\n                    <span style={{float:\"right\",color:\"#ef3c3c\"}}>{this.state.active[Object.keys(this.state.active).toString()]}%</span>\n                    <br></br><br></br><br></br>\n                    <span style={{float:\"left\"}}>Highest Recovery Rate</span><hr></hr>\n                    <span style={{float:\"left\"}}>{Object.keys(this.state.recovered).toString()}</span>\n                    <span style={{float:\"right\",color:\"#009933\"}}>{this.state.recovered[Object.keys(this.state.recovered).toString()]}%</span>\n                    <br></br><br></br><br></br>\n                    <span style={{float:\"left\"}}>Highest Death Rate</span><hr></hr>\n                    <span style={{float:\"left\"}}>{Object.keys(this.state.deaths).toString()}</span>\n                    <span style={{float:\"right\",color:\"red\"}}>{this.state.deaths[Object.keys(this.state.deaths).toString()]}%</span>\n\n                </div>\n              </div>\n            </div>\n        )\n    }\n}\n\nexport default Rates;"]},"metadata":{},"sourceType":"module"}