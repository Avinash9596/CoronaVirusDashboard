{"ast":null,"code":"import code from \"./../countrycordinates.json\";\nconst coronoService = {\n  structureData: function (value) {\n    let structuredData = {}; //INITIALISING ALL THE FIELDS \n\n    structuredData[\"affectedcountries\"] = [];\n    structuredData[\"tableData\"] = [];\n    structuredData[\"highestactive\"] = {};\n    structuredData[\"highestrecovered\"] = {};\n    structuredData[\"highestdeaths\"] = {};\n    structuredData[\"mapdata\"] = [];\n\n    try {\n      structuredData[\"TotalConfirmed\"] = value.total.confirmed[value.total.confirmed.length - 1][1];\n      structuredData[\"TotalDeaths\"] = value.total.deaths[value.total.deaths.length - 1][1];\n      structuredData[\"TotalRecovered\"] = value.total.recovered[value.total.recovered.length - 1][1];\n      structuredData[\"NewConfirmed\"] = structuredData[\"TotalConfirmed\"] - value.total.confirmed[value.total.confirmed.length - 2][1];\n      structuredData[\"NewRecovered\"] = structuredData[\"TotalRecovered\"] - value.total.recovered[value.total.recovered.length - 2][1];\n      structuredData[\"NewDeaths\"] = structuredData[\"TotalDeaths\"] - value.total.deaths[value.total.deaths.length - 2][1];\n      structuredData[\"activecases\"] = structuredData[\"TotalConfirmed\"] - (structuredData[\"TotalDeaths\"] + structuredData[\"TotalRecovered\"]); //get country wise data\n\n      value.countries.forEach(element => {\n        let confirmed = value.data[element].confirmed;\n        let deaths = value.data[element].deaths;\n        let recovered = value.data[element].recovered; // AFFECTED COUNTRIES\n\n        structuredData[\"affectedcountries\"].push({\n          \"name\": element,\n          \"cases\": confirmed[confirmed.length - 1][1],\n          \"percentage\": confirmed[confirmed.length - 1][1] / structuredData[\"TotalConfirmed\"] * 100\n        }); // ALL COUNTRIES/STATES DATA\n\n        structuredData[\"tableData\"].push({\n          \"name\": element,\n          \"cases\": confirmed[confirmed.length - 1][1],\n          \"deaths\": deaths[deaths.length - 1][1],\n          \"recovered\": recovered[recovered.length - 1][1],\n          \"changeinConfirmed\": confirmed[confirmed.length - 1][1] - confirmed[confirmed.length - 2][1],\n          \"changeinRecovered\": recovered[recovered.length - 1][1] - recovered[recovered.length - 2][1],\n          \"changeinDeaths\": deaths[deaths.length - 1][1] - deaths[deaths.length - 2][1],\n          \"changeinActive\": confirmed[confirmed.length - 1][1] - confirmed[confirmed.length - 2][1] - (recovered[recovered.length - 1][1] - recovered[recovered.length - 2][1]) - (deaths[deaths.length - 1][1] - deaths[deaths.length - 2][1]),\n          \"active\": confirmed[confirmed.length - 1][1] - deaths[deaths.length - 1][1] - recovered[recovered.length - 1][1],\n          \"recoveredRate\": (recovered[recovered.length - 1][1] / confirmed[confirmed.length - 1][1] * 100).toFixed(2)\n        }); // FOR HIGHEST ACTIVE/RECOVERED/DEATHS RATES\n\n        if (Object.keys(structuredData.highestactive).length > 0) {\n          if (structuredData.highestactive.active_percentage < (confirmed[confirmed.length - 1][1] - recovered[recovered.length - 1][1] - deaths[deaths.length - 1][1]) / confirmed[confirmed.length - 1][1] * 100) {\n            structuredData.highestactive.name = element;\n            structuredData.highestactive.active_percentage = (confirmed[confirmed.length - 1][1] - recovered[recovered.length - 1][1] - deaths[deaths.length - 1][1]) / confirmed[confirmed.length - 1][1] * 100;\n          }\n\n          if (structuredData.highestrecovered.rec_percentage < recovered[recovered.length - 1][1] / confirmed[confirmed.length - 1][1] * 100) {\n            structuredData.highestrecovered.name = element;\n            structuredData.highestrecovered.rec_percentage = recovered[recovered.length - 1][1] / confirmed[confirmed.length - 1][1] * 100;\n          }\n\n          if (structuredData.highestdeaths.death_percentage < deaths[deaths.length - 1][1] / confirmed[confirmed.length - 1][1] * 100) {\n            structuredData.highestdeaths.name = element;\n            structuredData.highestdeaths.death_percentage = deaths[deaths.length - 1][1] / confirmed[confirmed.length - 1][1] * 100;\n          }\n        } else {\n          structuredData.highestactive = {\n            name: element,\n            active_percentage: (confirmed[confirmed.length - 1][1] - recovered[recovered.length - 1][1] - deaths[deaths.length - 1][1]) / confirmed[confirmed.length - 1][1] * 100\n          };\n          structuredData.highestrecovered = {\n            name: element,\n            rec_percentage: recovered[recovered.length - 1][1] / confirmed[confirmed.length - 1][1] * 100\n          };\n          structuredData.highestdeaths = {\n            name: element,\n            death_percentage: deaths[deaths.length - 1][1] / confirmed[confirmed.length - 1][1] * 100\n          };\n        } //TO MAP CASES IN MAP CHART\n\n\n        if (presentRegion === 'India') {\n          structuredData[\"mapdata\"].push([element === \"Arunachal Pradesh\" ? \"arunanchal pradesh\" : element.toLowerCase(), parseInt(confirmed[confirmed.length - 1][1]).toLocaleString()]);\n          return;\n        } else code.ref_country_codes.forEach(x => {\n          if (x.country.toLowerCase() === element.toLowerCase()) structuredData[\"mapdata\"].push({\n            \"country\": x.country,\n            \"alpha3\": x.alpha3,\n            \"lat\": x.lat,\n            \"lon\": x.lon,\n            \"value\": parseInt(confirmed[confirmed.length - 1][1]).toLocaleString()\n          });\n        });\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    return structuredData;\n  }\n};\nexport default coronoService;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/services/corona.service.js"],"names":["code","coronoService","structureData","value","structuredData","total","confirmed","length","deaths","recovered","countries","forEach","element","data","push","toFixed","Object","keys","highestactive","active_percentage","name","highestrecovered","rec_percentage","highestdeaths","death_percentage","presentRegion","toLowerCase","parseInt","toLocaleString","ref_country_codes","x","country","alpha3","lat","lon","err","console","log"],"mappings":"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","sourcesContent":["import code from \"./../countrycordinates.json\";\n\nconst coronoService ={\n    \n\n    structureData:function(value){\n        let structuredData={};\n\n        //INITIALISING ALL THE FIELDS \n        structuredData[\"affectedcountries\"]=[];\n        structuredData[\"tableData\"] = [];\n        structuredData[\"highestactive\"] = {};\n        structuredData[\"highestrecovered\"] = {};\n        structuredData[\"highestdeaths\"] = {};\n        structuredData[\"mapdata\"]=[];\n\n        try{\n        structuredData[\"TotalConfirmed\"] = value.total.confirmed[value.total.confirmed.length-1][1];\n        structuredData[\"TotalDeaths\"] = value.total.deaths[value.total.deaths.length-1][1];\n        structuredData[\"TotalRecovered\"] = value.total.recovered[value.total.recovered.length-1][1];\n        structuredData[\"NewConfirmed\"] = structuredData[\"TotalConfirmed\"]-value.total.confirmed[value.total.confirmed.length-2][1];\n        structuredData[\"NewRecovered\"] = structuredData[\"TotalRecovered\"]-value.total.recovered[value.total.recovered.length-2][1];\n        structuredData[\"NewDeaths\"] = structuredData[\"TotalDeaths\"]-value.total.deaths[value.total.deaths.length-2][1];\n        structuredData[\"activecases\"] = structuredData[\"TotalConfirmed\"]-(structuredData[\"TotalDeaths\"]+structuredData[\"TotalRecovered\"]);    \n\n        //get country wise data\n        value.countries.forEach((element) => {\n            let confirmed = value.data[element].confirmed;\n            let deaths = value.data[element].deaths;\n            let recovered = value.data[element].recovered;\n\n            // AFFECTED COUNTRIES\n            structuredData[\"affectedcountries\"].push({\"name\":element,\"cases\":confirmed[confirmed.length-1][1],\"percentage\":(confirmed[confirmed.length-1][1]/structuredData[\"TotalConfirmed\"])*100});\n            \n            // ALL COUNTRIES/STATES DATA\n            structuredData[\"tableData\"].push({\"name\":element,\n            \"cases\":confirmed[confirmed.length-1][1],\n            \"deaths\":deaths[deaths.length-1][1],\n            \"recovered\":recovered[recovered.length-1][1],\n            \"changeinConfirmed\":confirmed[confirmed.length-1][1]-confirmed[confirmed.length-2][1],\n            \"changeinRecovered\" : recovered[recovered.length-1][1]-recovered[recovered.length-2][1],\n            \"changeinDeaths\":deaths[deaths.length-1][1]-deaths[deaths.length-2][1],\n            \"changeinActive\":((confirmed[confirmed.length-1][1]-confirmed[confirmed.length-2][1]) - (recovered[recovered.length-1][1]-recovered[recovered.length-2][1]) - (deaths[deaths.length-1][1]-deaths[deaths.length-2][1])),\n            \"active\":confirmed[confirmed.length-1][1]-deaths[deaths.length-1][1]-recovered[recovered.length-1][1],\n            \"recoveredRate\" : ((recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1])*100).toFixed(2)\n            })\n\n            // FOR HIGHEST ACTIVE/RECOVERED/DEATHS RATES\n            if(Object.keys(structuredData.highestactive).length>0){\n                if(structuredData.highestactive.active_percentage < ((confirmed[confirmed.length-1][1]-recovered[recovered.length-1][1]-deaths[deaths.length-1][1])/confirmed[confirmed.length-1][1])*100){\n                    structuredData.highestactive.name = element;\n                    structuredData.highestactive.active_percentage = ((confirmed[confirmed.length-1][1]-recovered[recovered.length-1][1]-deaths[deaths.length-1][1])/confirmed[confirmed.length-1][1])*100\n                }\n                if(structuredData.highestrecovered.rec_percentage < (recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1])*100){\n                    structuredData.highestrecovered.name=element;\n                    structuredData.highestrecovered.rec_percentage=(recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1])*100\n                }\n                if(structuredData.highestdeaths.death_percentage < (deaths[deaths.length-1][1]/confirmed[confirmed.length-1][1])*100){\n                    structuredData.highestdeaths.name = element;\n                    structuredData.highestdeaths.death_percentage = (deaths[deaths.length-1][1]/confirmed[confirmed.length-1][1])*100\n                }\n            }\n            else{\n              structuredData.highestactive={name:element,active_percentage: ((confirmed[confirmed.length-1][1] - recovered[recovered.length-1][1]-deaths[deaths.length-1][1])/confirmed[confirmed.length-1][1])*100};\n              structuredData.highestrecovered={name:element,rec_percentage:(recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1])*100};\n              structuredData.highestdeaths={name:element,death_percentage:(deaths[deaths.length-1][1]/confirmed[confirmed.length-1][1])*100};   \n            }\n            \n            //TO MAP CASES IN MAP CHART\n            if(presentRegion === 'India'){\n                structuredData[\"mapdata\"].push([element === \"Arunachal Pradesh\"?\"arunanchal pradesh\":element.toLowerCase(),parseInt(confirmed[confirmed.length-1][1]).toLocaleString()]);\n                return;\n              }\n              else\n                code.ref_country_codes.forEach(x=>{\n                   if(x.country.toLowerCase() === element.toLowerCase())\n                     structuredData[\"mapdata\"].push({\"country\":x.country,\"alpha3\":x.alpha3,\"lat\":x.lat,\"lon\":x.lon,\"value\":parseInt(confirmed[confirmed.length-1][1]).toLocaleString()})\n                   \n                })\n              \n\n        });\n        }\n        catch(err){\n            console.log(err);\n        }\n        \n        return structuredData;\n    },\n    \n}\n\nexport default coronoService;"]},"metadata":{},"sourceType":"module"}