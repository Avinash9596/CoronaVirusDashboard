{"ast":null,"code":"var _jsxFileName = \"/Users/matchajanardhanarao/Documents/coronodashboard/src/components/ColumnGraph.js\";\nimport React from 'react';\nimport Highcharts from 'highcharts/highcharts';\nimport drilldown from 'highcharts/modules/drilldown.js';\nimport HighchartsReact from 'highcharts-react-official';\ndrilldown(Highcharts);\n\nclass ColumnGraph extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      options: {}\n    };\n  }\n\n  componentDidMount() {\n    this.structureData();\n  }\n\n  structureData() {\n    try {\n      let data = this.props.data.total.confirmed;\n      let i = 0,\n          DaysInMonths = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n      let nameOfMonths = {\n        0: \"Jan\",\n        1: \"Feb\",\n        2: \"March\",\n        3: \"Apr\",\n        4: \"May\",\n        5: \"Jun\",\n        6: \"Jul\",\n        7: \"Aug\",\n        8: \"Sept\",\n        9: \"Oct\",\n        10: \"Nov\",\n        11: \"Dec\"\n      };\n      let obj = [],\n          month = 0,\n          prevdata = 0,\n          ddrObject = [],\n          daysdata = [],\n          daysPrevData = 0;\n      data.forEach((element, index) => {\n        month = new Date(element[0]).toISOString().split(\"-\")[1];\n        daysPrevData = 0;\n        if (index > 0) daysPrevData += data[index - 1][1];\n        daysdata.push([new Date(element[0]).toISOString().split(\"-\")[2].split(\"T\")[0], element[1] - daysPrevData]);\n\n        if (new Date(element[0]).toISOString().split(\"-\")[2].split(\"T\")[0] == DaysInMonths[month - 1]) {\n          ddrObject.push({\n            name: nameOfMonths[month - 1],\n            \"id\": i.toString(),\n            \"data\": daysdata\n          });\n          daysdata = [];\n          if (i > 0) prevdata += obj[i - 1].y;\n          obj[i] = {\n            name: nameOfMonths[month - 1],\n            \"y\": element[1] - prevdata,\n            drilldown: i.toString()\n          };\n          i++;\n        } else if (index == data.length - 1) {\n          prevdata += obj[i - 1].y;\n          ddrObject.push({\n            name: nameOfMonths[month - 1],\n            \"id\": i.toString(),\n            \"data\": daysdata\n          });\n          daysdata = [];\n          obj[i] = {\n            name: nameOfMonths[month - 1],\n            \"y\": element[1] - prevdata,\n            drilldown: i.toString()\n          };\n        }\n      });\n      this.setState({\n        options: {\n          chart: {\n            type: 'column',\n            height: 350\n          },\n          title: {\n            text: this.props.presentRegion + ' Coronovirus Cases, 2020'\n          },\n          subtitle: {\n            text: 'Monthly/Daily Cases'\n          },\n          xAxis: {\n            type: 'category'\n          },\n          yAxis: {\n            title: {\n              text: 'Cases'\n            }\n          },\n          legend: {\n            enabled: false\n          },\n          credits: {\n            enabled: false\n          },\n          plotOptions: {\n            series: {\n              borderWidth: 0,\n              dataLabels: {\n                enabled: true,\n                format: '{point.y}'\n              }\n            }\n          },\n          accessibility: {\n            announceNewData: {\n              enabled: true\n            }\n          },\n          tooltip: {\n            enabled: true,\n            formatter: function () {\n              return this.series.name + \" \" + this.point.name + \"<br/> Cases:<b>\" + this.point.y + \"</b>\";\n            },\n            useHTML: true\n          },\n          series: [{\n            name: \"Month\",\n            data: obj\n          }, {\n            type: 'spline',\n            name: 'Average',\n            data: [30000, 2.67, 3, 6.33, 3.33],\n            marker: {\n              lineWidth: 2,\n              lineColor: Highcharts.getOptions().colors[3],\n              fillColor: 'white'\n            }\n          }],\n          drilldown: {\n            name: \"Dates\",\n            series: ddrObject\n          }\n        }\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }, \"Confirmed\"), \"\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 73\n      }\n    }, \"Recovered\"), \"\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 125\n      }\n    }, \"Deaths\")), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: this.state.options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 19\n      }\n    })));\n  }\n\n}\n\nexport default ColumnGraph;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/components/ColumnGraph.js"],"names":["React","Highcharts","drilldown","HighchartsReact","ColumnGraph","Component","constructor","props","state","options","componentDidMount","structureData","data","total","confirmed","i","DaysInMonths","nameOfMonths","obj","month","prevdata","ddrObject","daysdata","daysPrevData","forEach","element","index","Date","toISOString","split","push","name","toString","y","length","setState","chart","type","height","title","text","presentRegion","subtitle","xAxis","yAxis","legend","enabled","credits","plotOptions","series","borderWidth","dataLabels","format","accessibility","announceNewData","tooltip","formatter","point","useHTML","marker","lineWidth","lineColor","getOptions","colors","fillColor","err","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Highcharts from 'highcharts/highcharts';\r\nimport drilldown from 'highcharts/modules/drilldown.js'\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\n\r\ndrilldown(Highcharts);\r\n\r\nclass ColumnGraph extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super();\r\n        this.state={\r\n        options: {\r\n        }\r\n       }\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        this.structureData();\r\n    }\r\n\r\n    structureData()\r\n    { \r\n      try{\r\n        let data =this.props.data.total.confirmed;\r\n\r\n        let i=0,DaysInMonths =[31,29,31,30,31,30,31,31,30,31,30,31];\r\n        let nameOfMonths = {0:\"Jan\",1:\"Feb\",2:\"March\",3:\"Apr\",4:\"May\",5:\"Jun\",6:\"Jul\",7:\"Aug\",8:\"Sept\",9:\"Oct\",10:\"Nov\",11:\"Dec\"}\r\n\r\n        let obj =[],month=0,prevdata=0,ddrObject=[],daysdata=[],daysPrevData=0;\r\n\r\n\r\n        data.forEach((element,index) => {\r\n            month = new Date(element[0]).toISOString().split(\"-\")[1];\r\n            daysPrevData = 0;\r\n\r\n            if(index>0)\r\n                daysPrevData+=data[index-1][1];\r\n        \r\n            daysdata.push([new Date(element[0]).toISOString().split(\"-\")[2].split(\"T\")[0],element[1]-daysPrevData]);\r\n\r\n            if(new Date(element[0]).toISOString().split(\"-\")[2].split(\"T\")[0] == DaysInMonths[month-1]){\r\n\r\n                ddrObject.push({name:nameOfMonths[month-1],\"id\":i.toString(),\"data\":daysdata});\r\n                daysdata=[];\r\n                if(i>0) prevdata+=obj[i-1].y;\r\n\r\n                obj[i]={name:nameOfMonths[month-1],\"y\":element[1]-prevdata,drilldown:i.toString()};\r\n\r\n                i++;\r\n            }\r\n            else if(index == data.length-1){\r\n                prevdata+=obj[i-1].y;\r\n                ddrObject.push({name:nameOfMonths[month-1],\"id\":i.toString(),\"data\":daysdata});\r\n                daysdata=[];\r\n                obj[i] = {name:nameOfMonths[month-1],\"y\":element[1]-prevdata,drilldown:i.toString()};\r\n            }      \r\n        });\r\n\r\n        this.setState({\r\n            options: {\r\n                chart: {\r\n                    type: 'column',\r\n                    height:350\r\n                },\r\n                title: {\r\n                    text: this.props.presentRegion+' Coronovirus Cases, 2020'\r\n                },\r\n                subtitle: {\r\n                    text: 'Monthly/Daily Cases'\r\n                },\r\n                \r\n                xAxis: {\r\n                    type: 'category',\r\n                },\r\n                yAxis: {\r\n                    title: {\r\n                        text: 'Cases'\r\n                    }\r\n                },\r\n                legend: {\r\n                    enabled: false\r\n                },\r\n                credits:{\r\n                    enabled:false\r\n                },\r\n                plotOptions: {\r\n                    series: {\r\n                        borderWidth: 0,\r\n                        dataLabels: {\r\n                            enabled: true,\r\n                            format: '{point.y}'\r\n                        }\r\n                    }\r\n                },\r\n                accessibility: {\r\n                    announceNewData: {\r\n                        enabled: true\r\n                    }\r\n                },\r\n                tooltip: {\r\n                    enabled:true,\r\n                    formatter: function() {\r\n                        return this.series.name+\" \"+this.point.name+\"<br/> Cases:<b>\"+this.point.y+\"</b>\"\r\n                    },\r\n                     useHTML:true\r\n                },\r\n            \r\n                series: [\r\n                    {\r\n                       name:\"Month\", \r\n                        data:obj,\r\n                    },\r\n                        {\r\n                            type: 'spline',\r\n                            name: 'Average',\r\n                            data: [30000, 2.67, 3, 6.33, 3.33],\r\n                            marker: {\r\n                                lineWidth: 2,\r\n                                lineColor: Highcharts.getOptions().colors[3],\r\n                                fillColor: 'white'\r\n                            }\r\n                   }\r\n                ],\r\n                drilldown: {\r\n                    name:\"Dates\",\r\n                    series: ddrObject\r\n                }\r\n            }\r\n        });\r\n       }\r\n       catch(err)\r\n       {\r\n           console.log(err);\r\n       }\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <span>Confirmed</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>Recovered</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>Deaths</span>\r\n                </div>\r\n                <hr></hr>\r\n                <div className=\"card-body\">\r\n                 \r\n                  <HighchartsReact highcharts={Highcharts} options={this.state.options} />\r\n                </div>\r\n                {/* <div class=\"row m-0 row-group text-center border-top border-light-3\">\r\n\t\t   <div class=\"col-12 col-lg-4\">\r\n\t\t     <div class=\"p-3\">\r\n\t\t       <h5 class=\"mb-0\">45.87M</h5>\r\n\t\t\t   <small class=\"mb-0\">Overall Visitor <span> <i class=\"fa fa-arrow-up\"></i> 2.43%</span></small>\r\n\t\t     </div>\r\n\t\t   </div>\r\n\t\t   <div class=\"col-12 col-lg-4\">\r\n\t\t     <div class=\"p-3\">\r\n\t\t       <h5 class=\"mb-0\">15:48</h5>\r\n\t\t\t   <small class=\"mb-0\" >Visitor Duration <span> <i class=\"fa fa-arrow-up\"></i> 12.65%</span></small>\r\n\t\t     </div>\r\n\t\t   </div>\r\n\t\t   <div class=\"col-12 col-lg-4\">\r\n\t\t     <div class=\"p-3\">\r\n\t\t       <h5 class=\"mb-0\">245.65</h5>\r\n\t\t\t   <small class=\"mb-0\" >Pages/Visit <span> <i class=\"fa fa-arrow-up\"></i> 5.62%</span></small>\r\n\t\t     </div>\r\n\t\t   </div>\r\n\t\t </div> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColumnGraph;"]},"metadata":{},"sourceType":"module"}