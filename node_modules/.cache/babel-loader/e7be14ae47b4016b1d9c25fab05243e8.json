{"ast":null,"code":"var _jsxFileName = \"/Users/matchajanardhanarao/Documents/coronodashboard/src/components/Rates.js\";\nimport React from \"react\";\nimport { ProgressBar } from 'primereact/progressbar';\n\nclass Rates extends React.Component {\n  constructor(props) {\n    super();\n    console.log(props);\n  }\n\n  componentDidMount() {\n    this.structureData();\n  }\n\n  async structureData() {\n    let data = []; //find the highest active cases rate\n    // Object.keys(this.props.data.data).forEach((x,index)=>{\n    //     if(index===0){\n    //         data.push(\n    //         {name:x,percent:((this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1]-this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]-this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1])/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100},\n    //         {name:x,percent:(this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100},\n    //         {name:x,percent:(this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100}\n    //         )\n    //     }\n    //     else{\n    //         if(data[0].percent< ((this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1]-this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]-this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1])/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100){\n    //             data[0].name=x;\n    //             data[0].percent=((this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1]-this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]-this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1])/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100\n    //         }\n    //         if(data[1].percent< (this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100){\n    //             data[1].name=x;\n    //             data[1].percent=(this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100\n    //         }\n    //         if(data[2].percent< (this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100){\n    //             data[2].name=x;\n    //             data[2].percent=(this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100\n    //         }\n    //     }\n    // });\n    // this.props.data[0].percent=data[0].percent.toFixed(2);\n    // data[1].percent=data[1].percent.toFixed(2);\n    // data[2].percent=data[2].percent.toFixed(2);\n    // data[1].name= data[1].name.split(\" \")[0];\n    // this.props.data.highestactive.active_percenatge = this.props.data.highestactive.active_percenatge.toFixed(2);\n    // this.props.data.highestrecovered.rec_percentage = this.props.data.highestrecovered.rec_percentage.toFixed(2);\n    // this.props.data.highestdeaths.death_percentage= this.props.data.highestdeaths.death_percentage.toFixed(2);\n  }\n\n  render() {\n    const {\n      highestactive,\n      highestrecovered,\n      highestdeaths\n    } = this.props.data;\n    console.log(highestactive, \"aaa\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-3 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      style: {\n        height: \"360px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        fontWeight: \"400\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 23\n      }\n    }, \"Highest Active Rate\"), /*#__PURE__*/React.createElement(ProgressBar, {\n      className: \"active\",\n      value: highestactive.active_percentage,\n      showValue: false,\n      style: {\n        height: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 23\n      }\n    }, highestactive.name), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 23\n      }\n    }, highestactive.active_percentage.toFixed(2), \"%\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 36\n      }\n    }), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        fontWeight: \"400\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 23\n      }\n    }, \"Highest Recovery Rate\"), /*#__PURE__*/React.createElement(ProgressBar, {\n      className: \"recovered\",\n      style: {\n        background: \"green !important\"\n      },\n      value: this.props.data.highestrecovered.rec_percentage,\n      showValue: false,\n      style: {\n        height: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 23\n      }\n    }, highestrecovered.name), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 23\n      }\n    }, highestrecovered.rec_percentage.toFixed(2), \"%\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 30\n      }\n    }), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        fontWeight: \"400\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 23\n      }\n    }, \"Highest Death Rate\"), /*#__PURE__*/React.createElement(ProgressBar, {\n      className: \"deaths\",\n      value: highestrecovered.rec_percentage,\n      showValue: false,\n      style: {\n        height: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 23\n      }\n    }, highestdeaths.name), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 23\n      }\n    }, highestdeaths.death_percentage.toFixed(2), \"%\")))));\n  }\n\n}\n\nexport default Rates;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/components/Rates.js"],"names":["React","ProgressBar","Rates","Component","constructor","props","console","log","componentDidMount","structureData","data","render","highestactive","highestrecovered","highestdeaths","height","fontWeight","active_percentage","float","name","toFixed","background","rec_percentage","death_percentage"],"mappings":";AAAA,OAAQA,KAAR,MAAoB,OAApB;AACA,SAAQC,WAAR,QAA0B,wBAA1B;;AAIA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EACX;AACI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAGH;;AAEDG,EAAAA,iBAAiB,GAAE;AACf,SAAKC,aAAL;AACH;;AAEF,QAAMA,aAAN,GAAqB;AACf,QAAIC,IAAI,GAAC,EAAT,CADe,CAGhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEH;;AAGDC,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACC,MAAAA,aAAD;AAAeC,MAAAA,gBAAf;AAAgCC,MAAAA;AAAhC,QAAiD,KAAKT,KAAL,CAAWK,IAAlE;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYK,aAAZ,EAA0B,KAA1B;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,KAAK,EAAE;AAACG,QAAAA,MAAM,EAAC;AAAR,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,KAAK,EAAE;AAACC,QAAAA,UAAU,EAAC;AAAZ,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,eAEE,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,QAAvB;AAAgC,MAAA,KAAK,EAAEJ,aAAa,CAACK,iBAArD;AAAwE,MAAA,SAAS,EAAG,KAApF;AAA2F,MAAA,KAAK,EAAE;AAACF,QAAAA,MAAM,EAAC;AAAR,OAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAM,MAAA,KAAK,EAAE;AAACG,QAAAA,KAAK,EAAC;AAAP,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8BN,aAAa,CAACO,IAA5C,CAHF,eAIE;AAAM,MAAA,KAAK,EAAE;AAACD,QAAAA,KAAK,EAAC;AAAP,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+BN,aAAa,CAACK,iBAAd,CAAgCG,OAAhC,CAAwC,CAAxC,CAA/B,MAJF,CADJ,eAMU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANV,eAMmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANnB,eAM4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAN5B,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,KAAK,EAAE;AAACJ,QAAAA,UAAU,EAAC;AAAZ,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,eAEE,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,WAAvB;AAAmC,MAAA,KAAK,EAAE;AAACK,QAAAA,UAAU,EAAC;AAAZ,OAA1C;AAA2E,MAAA,KAAK,EAAG,KAAKhB,KAAL,CAAWK,IAAX,CAAgBG,gBAAhB,CAAiCS,cAApH;AAAoI,MAAA,SAAS,EAAG,KAAhJ;AAAuJ,MAAA,KAAK,EAAE;AAACP,QAAAA,MAAM,EAAC;AAAR,OAA9J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAM,MAAA,KAAK,EAAE;AAACG,QAAAA,KAAK,EAAC;AAAP,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8BL,gBAAgB,CAACM,IAA/C,CAHF,eAIE;AAAM,MAAA,KAAK,EAAE;AAACD,QAAAA,KAAK,EAAC;AAAP,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+BL,gBAAgB,CAACS,cAAjB,CAAgCF,OAAhC,CAAwC,CAAxC,CAA/B,MAJF,CARJ,eAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,eAca;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdb,eAcsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdtB,eAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,KAAK,EAAE;AAACJ,QAAAA,UAAU,EAAC;AAAZ,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,QAAvB;AAAgC,MAAA,KAAK,EAAEH,gBAAgB,CAACS,cAAxD;AAAwE,MAAA,SAAS,EAAG,KAApF;AAA2F,MAAA,KAAK,EAAE;AAACP,QAAAA,MAAM,EAAC;AAAR,OAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAM,MAAA,KAAK,EAAE;AAACG,QAAAA,KAAK,EAAC;AAAP,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8BJ,aAAa,CAACK,IAA5C,CAHF,eAIE;AAAM,MAAA,KAAK,EAAE;AAACD,QAAAA,KAAK,EAAC;AAAP,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+BJ,aAAa,CAACS,gBAAd,CAA+BH,OAA/B,CAAuC,CAAvC,CAA/B,MAJF,CAfJ,CADF,CADF,CADJ;AA6BH;;AApF8B;;AAuFnC,eAAelB,KAAf","sourcesContent":["import  React  from \"react\";\nimport {ProgressBar} from 'primereact/progressbar';\n\n\n\nclass Rates extends React.Component{\n    constructor(props)\n    {\n        super();\n        console.log(props);\n       \n    \n    }\n\n    componentDidMount(){\n        this.structureData();\n    }\n\n   async structureData(){\n         let data=[];\n\n        //find the highest active cases rate\n        // Object.keys(this.props.data.data).forEach((x,index)=>{\n        //     if(index===0){\n        //         data.push(\n        //         {name:x,percent:((this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1]-this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]-this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1])/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100},\n        //         {name:x,percent:(this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100},\n        //         {name:x,percent:(this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100}\n        //         )\n        //     }\n        //     else{\n        //         if(data[0].percent< ((this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1]-this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]-this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1])/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100){\n        //             data[0].name=x;\n        //             data[0].percent=((this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1]-this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]-this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1])/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100\n        //         }\n        //         if(data[1].percent< (this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100){\n        //             data[1].name=x;\n        //             data[1].percent=(this.props.data.data[x].recovered[this.props.data.data[x].recovered.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100\n        //         }\n        //         if(data[2].percent< (this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100){\n        //             data[2].name=x;\n        //             data[2].percent=(this.props.data.data[x].deaths[this.props.data.data[x].deaths.length-1][1]/this.props.data.data[x].confirmed[this.props.data.data[x].confirmed.length-1][1])*100\n        //         }\n        //     }\n        // });\n        // this.props.data[0].percent=data[0].percent.toFixed(2);\n        // data[1].percent=data[1].percent.toFixed(2);\n        // data[2].percent=data[2].percent.toFixed(2);\n        // data[1].name= data[1].name.split(\" \")[0];\n\n        // this.props.data.highestactive.active_percenatge = this.props.data.highestactive.active_percenatge.toFixed(2);\n        // this.props.data.highestrecovered.rec_percentage = this.props.data.highestrecovered.rec_percentage.toFixed(2);\n        // this.props.data.highestdeaths.death_percentage= this.props.data.highestdeaths.death_percentage.toFixed(2);\n\n    }\n\n\n    render(){\n        const {highestactive,highestrecovered,highestdeaths} = this.props.data;  \n        console.log(highestactive,\"aaa\")\n        return(\n            <div className=\"col-xl-3 col-md-12\">\n              <div className=\"card\" style={{height:\"360px\"}}>\n                <div className=\"card-body\">\n                    <div>\n                      <h6 style={{fontWeight:\"400\"}}>Highest Active Rate</h6>\n                      <ProgressBar className=\"active\" value={highestactive.active_percentage} showValue ={false} style={{height:'5px'}} />\n                      <span style={{float:\"left\"}}>{highestactive.name}</span>\n                      <span style={{float:\"right\"}}>{highestactive.active_percentage.toFixed(2)}%</span>\n                    </div><br></br><br></br><hr></hr>\n\n                    <div>\n                      <h6 style={{fontWeight:\"400\"}}>Highest Recovery Rate</h6>\n                      <ProgressBar className=\"recovered\" style={{background:\"green !important\"}} value={ this.props.data.highestrecovered.rec_percentage} showValue ={false} style={{height:'5px'}} />\n                      <span style={{float:\"left\"}}>{highestrecovered.name}</span>\n                      <span style={{float:\"right\"}}>{highestrecovered.rec_percentage.toFixed(2)}%</span>\n                    </div>\n                    <br></br><br></br><hr></hr>\n                    <div>\n                      <h6 style={{fontWeight:\"400\"}}>Highest Death Rate</h6>\n                      <ProgressBar className=\"deaths\" value={highestrecovered.rec_percentage} showValue ={false} style={{height:'5px'}} />\n                      <span style={{float:\"left\"}}>{highestdeaths.name}</span>\n                      <span style={{float:\"right\"}}>{highestdeaths.death_percentage.toFixed(2)}%</span>\n                    </div>\n\n                </div>\n              </div>\n            </div>\n        )\n    }\n}\n\nexport default Rates;"]},"metadata":{},"sourceType":"module"}