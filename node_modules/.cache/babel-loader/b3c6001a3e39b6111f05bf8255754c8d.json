{"ast":null,"code":"const coronoService = {\n  structureData: function (value) {\n    let structuredData = {};\n    structuredData[\"TotalConfirmed\"] = value.total.confirmed[value.total.confirmed.length - 1][1];\n    structuredData[\"TotalDeaths\"] = value.total.deaths[value.total.deaths.length - 1][1];\n    structuredData[\"TotalRecovered\"] = value.total.recovered[value.total.recovered.length - 1][1];\n    structuredData[\"NewConfirmed\"] = structuredData[\"TotalConfirmed\"] - value.total.confirmed[value.total.confirmed.length - 2][1];\n    structuredData[\"NewRecovered\"] = structuredData[\"TotalRecovered\"] - value.total.recovered[value.total.recovered.length - 2][1];\n    structuredData[\"NewDeaths\"] = structuredData[\"TotalDeaths\"] - value.total.deaths[value.total.deaths.length - 2][1];\n    structuredData[\"activecases\"] = structuredData[\"TotalConfirmed\"] - (structuredData[\"TotalDeaths\"] + structuredData[\"TotalRecovered\"]); //get country wise data for tableData/AffectedCountries\n\n    value.countries.forEach((element, index) => {\n      let confirmed = this.props.data.data[element].confirmed;\n      let deaths = this.props.data.data[element].deaths;\n      let recovered = this.props.data.data[element].recovered;\n      structuredData[\"affectedcountries\"].push({\n        \"name\": element,\n        \"cases\": confirmed[confirmed.length - 1][1],\n        \"percentage\": confirmed[confirmed.length - 1][1] / structuredData[\"TotalConfirmed\"] * 100\n      });\n      structuredData[\"tableData\"].push({\n        \"name\": element,\n        \"cases\": confirmed[confirmed.length - 1][1],\n        \"deaths\": deaths[deaths.length - 1][1],\n        \"recovered\": recovered[recovered.length - 1][1],\n        \"changeinConfirmed\": confirmed[confirmed.length - 1][1] - confirmed[confirmed.length - 2][1],\n        \"changeinRecovered\": recovered[recovered.length - 1][1] - recovered[recovered.length - 2][1],\n        \"changeinDeaths\": deaths[deaths.length - 1][1] - deaths[deaths.length - 2][1],\n        \"changeinActive\": confirmed[confirmed.length - 1][1] - confirmed[confirmed.length - 2][1] - (recovered[recovered.length - 1][1] - recovered[recovered.length - 2][1]) - (deaths[deaths.length - 1][1] - deaths[deaths.length - 2][1]),\n        \"active\": confirmed[confirmed.length - 1][1] - deaths[deaths.length - 1][1] - recovered[recovered.length - 1][1],\n        \"recoveredRate\": (recovered[recovered.length - 1][1] / confirmed[confirmed.length - 1][1] * 100).toFixed(2)\n      });\n    });\n    return value;\n  }\n};\nexport default coronoService;","map":{"version":3,"sources":["/Users/matchajanardhanarao/Documents/coronodashboard/src/corono.service.js"],"names":["coronoService","structureData","value","structuredData","total","confirmed","length","deaths","recovered","countries","forEach","element","index","props","data","push","toFixed"],"mappings":"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","sourcesContent":["const coronoService ={\n\n\n    structureData:function(value){\n        let structuredData={};\n\n        structuredData[\"TotalConfirmed\"] = value.total.confirmed[value.total.confirmed.length-1][1];\n        structuredData[\"TotalDeaths\"] = value.total.deaths[value.total.deaths.length-1][1];\n        structuredData[\"TotalRecovered\"] = value.total.recovered[value.total.recovered.length-1][1];\n        structuredData[\"NewConfirmed\"] = structuredData[\"TotalConfirmed\"]-value.total.confirmed[value.total.confirmed.length-2][1];\n        structuredData[\"NewRecovered\"] = structuredData[\"TotalRecovered\"]-value.total.recovered[value.total.recovered.length-2][1];\n        structuredData[\"NewDeaths\"] = structuredData[\"TotalDeaths\"]-value.total.deaths[value.total.deaths.length-2][1];\n        structuredData[\"activecases\"] = structuredData[\"TotalConfirmed\"]-(structuredData[\"TotalDeaths\"]+structuredData[\"TotalRecovered\"]);    \n\n        //get country wise data for tableData/AffectedCountries\n        value.countries.forEach((element,index) => {\n            let confirmed = this.props.data.data[element].confirmed;\n            let deaths = this.props.data.data[element].deaths;\n            let recovered = this.props.data.data[element].recovered;\n\n            structuredData[\"affectedcountries\"].push({\"name\":element,\"cases\":confirmed[confirmed.length-1][1],\"percentage\":(confirmed[confirmed.length-1][1]/structuredData[\"TotalConfirmed\"])*100});\n            \n            structuredData[\"tableData\"].push({\"name\":element,\n            \"cases\":confirmed[confirmed.length-1][1],\n            \"deaths\":deaths[deaths.length-1][1],\n            \"recovered\":recovered[recovered.length-1][1],\n            \"changeinConfirmed\":confirmed[confirmed.length-1][1]-confirmed[confirmed.length-2][1],\n            \"changeinRecovered\" : recovered[recovered.length-1][1]-recovered[recovered.length-2][1],\n            \"changeinDeaths\":deaths[deaths.length-1][1]-deaths[deaths.length-2][1],\n            \"changeinActive\":((confirmed[confirmed.length-1][1]-confirmed[confirmed.length-2][1]) - (recovered[recovered.length-1][1]-recovered[recovered.length-2][1]) - (deaths[deaths.length-1][1]-deaths[deaths.length-2][1])),\n            \"active\":confirmed[confirmed.length-1][1]-deaths[deaths.length-1][1]-recovered[recovered.length-1][1],\n            \"recoveredRate\" : ((recovered[recovered.length-1][1]/confirmed[confirmed.length-1][1])*100).toFixed(2)\n            })\n\n        });\n        return value;\n    }\n}\n\nexport default coronoService;"]},"metadata":{},"sourceType":"module"}